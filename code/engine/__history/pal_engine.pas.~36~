unit pal_engine;

interface

uses
  WinApi.Windows,
  sdl2;

const
  MAX_NETS = 3;
  MAX_RES_PER_NET = 18;
  SET_TRANS_COLOR = $69;
  MAX_COLORS = $8000;

type
  tcolor = record
    r, g, b: byte;
    a: byte;
  end;

  tpaleta = array [0 .. MAX_COLORS] of tcolor;

var
  paleta, buffer_paleta: array [0 .. MAX_COLORS] of word;
  paleta32, paleta_alpha: array [0 .. MAX_COLORS] of dword;
  buffer_color: array [0 .. MAX_COLORS] of boolean;

procedure compute_resistor_weights(minval, maxval: integer; scaler: single; count_1: integer;
  resistances_1: pinteger; weights_1: psingle; pulldown_1, pullup_1: integer; count_2: integer;
  resistances_2: pinteger; weights_2: psingle; pulldown_2, pullup_2: integer; count_3: integer;
  resistances_3: pinteger; weights_3: psingle; pulldown_3, pullup_3: integer);
function combine_2_weights(tab: psingle; w0, w1: integer): integer;
function combine_3_weights(tab: psingle; w0, w1, w2: integer): integer;
function combine_4_weights(tab: psingle; w0, w1, w2, w3: integer): integer;
function combine_6_weights(tab: psingle; w0, w1, w2, w3, w4, w5: integer): integer;
function pal1bit(bits: byte): byte;
function pal2bit(bits: byte): byte;
function pal3bit(bits: byte): byte;
function pal4bit(bits: byte): byte;
function pal4bit_i(bits, i: byte): byte;
function pal5bit(bits: byte): byte;
function pal6bit(bits: byte): byte;
// Palette functions
procedure set_pal(ppaleta: tpaleta; total_colors: word);
procedure set_pal_color(pcolor: tcolor; pal_pos: word);
procedure set_pal_color_alpha(pcolor: tcolor; pal_pos: word);
function convert_pal_color(pcolor: tcolor): word;

implementation

uses main_engine;

procedure compute_resistor_weights(minval, maxval: integer; scaler: single; count_1: integer;
  resistances_1: pinteger; weights_1: psingle; pulldown_1, pullup_1: integer; count_2: integer;
  resistances_2: pinteger; weights_2: psingle; pulldown_2, pullup_2: integer; count_3: integer;
  resistances_3: pinteger; weights_3: psingle; pulldown_3, pullup_3: integer);
var
  networks_no, i, j, n, count, pd, pu: integer;
  rescount: array [0 .. (MAX_NETS - 1)] of integer; // Number of resistors in each net
  r, w, ws: array [0 .. (MAX_NETS - 1), 0 .. (MAX_RES_PER_NET - 1)] of single; // Resistances and weights
  r_pd, r_pu: array [0 .. (MAX_NETS - 1)] of integer; // Pulldown and pullup resistances
  max_out: array [0 .. (MAX_NETS - 1)] of single;
  out_: array [0 .. (MAX_NETS - 1)] of psingle;
  resistances: pinteger;
  weights: psingle;
  scale, max, sum, R0, R1, Vout, dst: single;
  out2_: psingle;
begin
  // Parse input parameters
  networks_no := 0;

  for n := 0 to 2 do
  begin
    case n of
      0:
        begin
          count := count_1;
          resistances := resistances_1;
          weights := weights_1;
          pd := pulldown_1;
          pu := pullup_1;
        end;
      1:
        begin
          count := count_2;
          resistances := resistances_2;
          weights := weights_2;
          pd := pulldown_2;
          pu := pullup_2;
        end;
      2:
        begin
          count := count_3;
          resistances := resistances_3;
          weights := weights_3;
          pd := pulldown_3;
          pu := pullup_3;
        end;
    end;

    if count > 0 then
    begin
      // Store resistor count and pulldown/pullup for the current network
      rescount[networks_no] := count;
      r_pd[networks_no] := pd;
      r_pu[networks_no] := pu;
      out_[networks_no] := weights;

      // Load resistances into the `r` array
      for i := 0 to count - 1 do
        r[networks_no, i] := resistances[i];

      inc(networks_no);
    end;
  end;

  // Calculate the output voltages for all networks
  for i := 0 to networks_no - 1 do
  begin
    for n := 0 to rescount[i] - 1 do
    begin
      if r_pd[i] = 0 then
        R0 := 1.0 / 1E12
      else
        R0 := 1.0 / r_pd[i];

      if r_pu[i] = 0 then
        R1 := 1.0 / 1E12
      else
        R1 := 1.0 / r_pu[i];

      // Calculate total resistance for the network
      for j := 0 to rescount[i] - 1 do
      begin
        if r[i, j] <> 0.0 then
        begin
          if j = n then
            R1 := R1 + (1.0 / r[i, j])  // Resistance connected to Vcc
          else
            R0 := R0 + (1.0 / r[i, j]); // Resistance connected to GND
        end;
      end;

      // Compute output voltage using voltage divider formula
      R0 := 1.0 / R0;
      R1 := 1.0 / R1;
      Vout := (maxval - minval) * R0 / (R1 + R0) + minval;

      // Clamp the output voltage to the allowed range
      if Vout < minval then
        dst := minval
      else if Vout > maxval then
        dst := maxval
      else
        dst := Vout;

      w[i, n] := dst;
    end;
  end;

  // Calculate maximum output for each network
  max := 0.0;
  for i := 0 to networks_no - 1 do
  begin
    sum := 0.0;
    for n := 0 to rescount[i] - 1 do
      sum := sum + w[i, n];

    max_out[i] := sum;

    // Track the maximum sum across all networks
    if sum > max then
      max := sum;
  end;

  // Use autoscaling if no scaler provided
  if scaler < 0.0 then
    scale := maxval / max
  else
    scale := scaler;

  // Scale the results and populate the output weight tables
  for i := 0 to networks_no - 1 do
  begin
    for n := 0 to rescount[i] - 1 do
    begin
      ws[i, n] := w[i, n] * scale;  // Scale the result
      out2_ := out_[i];
      inc(out2_, n);                // Move to the correct output weight position
      out2_^ := ws[i, n];           // Store the scaled weight
    end;
  end;
end;


function combine_2_weights(tab: psingle; w0, w1: integer): integer;
var
  res: single;
  ptemp: psingle;
begin
  ptemp := tab;
  res := ptemp^ * w0;
  inc(ptemp);
  res := res + ptemp^ * w1 + 0.5;
  if res > 255 then
    res := 255;
  combine_2_weights := trunc(res);
end;

function combine_3_weights(tab: psingle; w0, w1, w2: integer): integer;
var
  res: single;
  ptemp: psingle;
begin
  ptemp := tab;
  res := ptemp^ * w0;
  inc(ptemp);
  res := res + ptemp^ * w1;
  inc(ptemp);
  res := res + ptemp^ * w2 + 0.5;
  if res > 255 then
    res := 255;
  combine_3_weights := trunc(res);
end;

function combine_4_weights(tab: psingle; w0, w1, w2, w3: integer): integer;
var
  res: single;
  ptemp: psingle;
begin
  ptemp := tab;
  res := ptemp^ * w0;
  inc(ptemp);
  res := res + ptemp^ * w1;
  inc(ptemp);
  res := res + ptemp^ * w2;
  inc(ptemp);
  res := (res + ptemp^ * w3) + 0.5;
  if res > 255 then
    res := 255;
  combine_4_weights := trunc(res);
end;

function combine_6_weights(tab: psingle; w0, w1, w2, w3, w4, w5: integer): integer;
var
  res: single;
  ptemp: psingle;
begin
  ptemp := tab;
  res := ptemp^ * w0;
  inc(ptemp);
  res := res + ptemp^ * w1;
  inc(ptemp);
  res := res + ptemp^ * w2;
  inc(ptemp);
  res := res + ptemp^ * w3;
  inc(ptemp);
  res := res + ptemp^ * w4;
  inc(ptemp);
  res := (res + ptemp^ * w5) + 0.5;
  if res > 255 then
    res := 255;
  combine_6_weights := trunc(res);
end;

function pal1bit(bits: byte): byte;
begin
  if (bits and 1) <> 0 then
    pal1bit := $FF
  else
    pal1bit := 0;
end;

function pal2bit(bits: byte): byte;
begin
  bits := bits and 3;
  pal2bit := (bits shl 6) or (bits shl 4) or (bits shl 2) or bits;
end;

function pal3bit(bits: byte): byte;
begin
  bits := bits and 7;
  pal3bit := (bits shl 5) or (bits shl 2) or (bits shr 1);
end;

function pal4bit(bits: byte): byte;
begin
  bits := bits and $F;
  pal4bit := (bits shl 4) or bits;
end;

function pal4bit_i(bits, i: byte): byte;
const
  ztable: array [0 .. 15] of byte = ($0, $3, $4, $5, $6, $7, $8, $9, $A, $B, $C, $D, $E, $F,
    $10, $11);
begin
  pal4bit_i := (bits and $F) * ztable[i];
end;

function pal5bit(bits: byte): byte;
begin
  bits := bits and $1F;
  pal5bit := (bits shl 3) or (bits shr 2);
end;

function pal6bit(bits: byte): byte;
begin
  bits := bits and $3F;
  pal6bit := (bits shl 2) or (bits shr 4);
end;

// Palette functions
procedure set_pal(ppaleta: tpaleta; total_colors: word);
var
  colors: word;
begin
  for colors := 0 to total_colors - 1 do
    paleta[colors] := SDL_MapRGB(gscreen[PANT_SPRITES].format, ppaleta[colors].r,
      ppaleta[colors].g, ppaleta[colors].b);
end;

procedure set_pal_color(pcolor: tcolor; pal_pos: word);
begin
  paleta[pal_pos] := SDL_MapRGB(gscreen[PANT_SPRITES].format, pcolor.r, pcolor.g, pcolor.b);
end;

function convert_pal_color(pcolor: tcolor): word;
begin
  convert_pal_color := SDL_MapRGB(gscreen[PANT_SPRITES].format, pcolor.r, pcolor.g, pcolor.b);
end;

procedure set_pal_color_alpha(pcolor: tcolor; pal_pos: word);
begin
  paleta[pal_pos] := SDL_MapRGB(gscreen[PANT_SPRITES].format, pcolor.r, pcolor.g, pcolor.b);
  paleta32[pal_pos] := SDL_MapRGBA(gscreen[PANT_SPRITES_ALPHA].format, pcolor.r, pcolor.g,
    pcolor.b, $FF);
  paleta_alpha[pal_pos] := SDL_MapRGBA(gscreen[PANT_SPRITES_ALPHA].format, pcolor.r, pcolor.g,
    pcolor.b, $80);
end;

end.
