unit funkyjet_hw;

interface

uses
  WinApi.Windows,
  m68000,
  main_engine,
  controls_engine,
  gfx_engine,
  rom_engine,
  pal_engine,
  oki6295,
  sound_engine,
  hu6280,
  deco_16ic,
  deco_decr,
  deco_common,
  misc_functions,
  deco_146;

function start_funkyjet: boolean;

implementation

const
  funkyjet_rom: array [0 .. 1] of tipo_roms = ((n: 'jk00.12f'; l: $40000; p: 0; crc: $712089C1),
    (n: 'jk01.13f'; l: $40000; p: $1; crc: $BE3920D7));
  funkyjet_sound: tipo_roms = (n: 'jk02.16f'; l: $10000; p: $0; crc: $748C0BD8);
  funkyjet_char: tipo_roms = (n: 'mat02'; l: $80000; p: 0; crc: $E4B94C7E);
  funkyjet_oki: tipo_roms = (n: 'jk03.15h'; l: $20000; p: 0; crc: $69A0EAF7);
  funkyjet_sprites: array [0 .. 1] of tipo_roms = ((n: 'mat01'; l: $80000; p: 0; crc: $24093A8D),
    (n: 'mat00'; l: $80000; p: $80000; crc: $FBDA0228));
  funkyjet_dip_a: array [0 .. 9] of def_dip = ((mask: $0002; name: 'Flip Screen'; number: 2;
    dip: ((dip_val: $2; dip_name: 'Off'), (dip_val: $0; dip_name: 'On'), (), (), (), (), (), (), (),
    (), (), (), (), (), (), ())), (mask: $001C; name: 'Coin B'; number: 8;
    dip: ((dip_val: $0; dip_name: '3C 1C'), (dip_val: $10; dip_name: '2C 1C'), (dip_val: $1C;
    dip_name: '1C 1C'), (dip_val: $0C; dip_name: '1C 2C'), (dip_val: $14;
    dip_name: '1C 3C'), (dip_val: $04; dip_name: '1C 4C'), (dip_val: $18;
    dip_name: '1C 5C'), (dip_val: $08; dip_name: '1C 6C'), (), (), (), (), (), (), (), ())),
    (mask: $00E0; name: 'Coin A'; number: 8; dip: ((dip_val: $0; dip_name: '3C 1C'), (dip_val: $80;
    dip_name: '2C 1C'), (dip_val: $E0; dip_name: '1C 1C'), (dip_val: $60;
    dip_name: '1C 2C'), (dip_val: $A0; dip_name: '1C 3C'), (dip_val: $20;
    dip_name: '1C 4C'), (dip_val: $C0; dip_name: '1C 5C'), (dip_val: $40; dip_name: '1C 6C'), (),
    (), (), (), (), (), (), ())), (mask: $0100; name: 'Demo Sounds'; number: 2;
    dip: ((dip_val: $0; dip_name: 'Off'), (dip_val: $100; dip_name: 'On'), (), (), (), (), (), (),
    (), (), (), (), (), (), (), ())), (mask: $0200; name: 'Allow Continue'; number: 2;
    dip: ((dip_val: $0; dip_name: 'No'), (dip_val: $200; dip_name: 'Yes'), (), (), (), (), (), (),
    (), (), (), (), (), (), (), ())), (mask: $0400; name: 'Free Play'; number: 2;
    dip: ((dip_val: $400; dip_name: 'Off'), (dip_val: $0; dip_name: 'On'), (), (), (), (), (), (),
    (), (), (), (), (), (), (), ())), (mask: $0800; name: 'Flip Screen'; number: 2;
    dip: ((dip_val: $800; dip_name: 'Off'), (dip_val: $0; dip_name: 'On'), (), (), (), (), (), (),
    (), (), (), (), (), (), (), ())), (mask: $3000; name: 'Difficulty'; number: 4;
    dip: ((dip_val: $1000; dip_name: 'Easy'), (dip_val: $3000; dip_name: 'Normal'), (dip_val: $2000;
    dip_name: 'Hard'), (dip_val: $0000; dip_name: 'Very Hard'), (), (), (), (), (), (), (), (), (),
    (), (), ())), (mask: $C000; name: 'Lives'; number: 4;
    dip: ((dip_val: $8000; dip_name: '1'), (dip_val: $C000; dip_name: '2'), (dip_val: $4000;
    dip_name: '3'), (dip_val: $0000; dip_name: '4'), (), (), (), (), (), (), (), (), (), (), (),
    ())), ());

var
  rom: array [0 .. $3FFFF] of word;
  ram: array [0 .. $1FFF] of word;

procedure update_video_funkyjet;
begin
  // fill_full_screen(3,$200);
  deco16ic_0.update_pf_2(3, false);
  deco16ic_0.update_pf_1(3, true);
  deco_sprites_0.draw_sprites;
  update_final_piece(0, 8, 320, 240, 3);
end;

procedure events_funkyjet;
begin
  if event.arcade then
  begin
    // P1
    if p_contrls.map_arcade.up[0] then
      marcade.in0 := (marcade.in0 and $FFFE)
    else
      marcade.in0 := (marcade.in0 or $0001);
    if p_contrls.map_arcade.down[0] then
      marcade.in0 := (marcade.in0 and $FFFD)
    else
      marcade.in0 := (marcade.in0 or $0002);
    if p_contrls.map_arcade.left[0] then
      marcade.in0 := (marcade.in0 and $FFFB)
    else
      marcade.in0 := (marcade.in0 or $0004);
    if p_contrls.map_arcade.right[0] then
      marcade.in0 := (marcade.in0 and $FFF7)
    else
      marcade.in0 := (marcade.in0 or $0008);
    if p_contrls.map_arcade.but0[0] then
      marcade.in0 := (marcade.in0 and $FFEF)
    else
      marcade.in0 := (marcade.in0 or $0010);
    if p_contrls.map_arcade.but1[0] then
      marcade.in0 := (marcade.in0 and $FFDF)
    else
      marcade.in0 := (marcade.in0 or $0020);
    if p_contrls.map_arcade.start[0] then
      marcade.in0 := (marcade.in0 and $FF7F)
    else
      marcade.in0 := (marcade.in0 or $0080);
    // P2
    if p_contrls.map_arcade.up[1] then
      marcade.in0 := (marcade.in0 and $FEFF)
    else
      marcade.in0 := (marcade.in0 or $0100);
    if p_contrls.map_arcade.down[1] then
      marcade.in0 := (marcade.in0 and $FDFF)
    else
      marcade.in0 := (marcade.in0 or $0200);
    if p_contrls.map_arcade.left[1] then
      marcade.in0 := (marcade.in0 and $FBFF)
    else
      marcade.in0 := (marcade.in0 or $0400);
    if p_contrls.map_arcade.right[1] then
      marcade.in0 := (marcade.in0 and $F7FF)
    else
      marcade.in0 := (marcade.in0 or $0800);
    if p_contrls.map_arcade.but0[1] then
      marcade.in0 := (marcade.in0 and $EFFF)
    else
      marcade.in0 := (marcade.in0 or $1000);
    if p_contrls.map_arcade.but1[1] then
      marcade.in0 := (marcade.in0 and $DFFF)
    else
      marcade.in0 := (marcade.in0 or $2000);
    if p_contrls.map_arcade.start[1] then
      marcade.in0 := (marcade.in0 and $7FFF)
    else
      marcade.in0 := (marcade.in0 or $8000);
    // SYSTEM
    if p_contrls.map_arcade.coin[0] then
      marcade.in1 := (marcade.in1 and $FFFE)
    else
      marcade.in1 := (marcade.in1 or $0001);
    if p_contrls.map_arcade.coin[1] then
      marcade.in1 := (marcade.in1 and $FFFD)
    else
      marcade.in1 := (marcade.in1 or $0002);
  end;
end;

procedure funkyjet_loop;
var
  frame_m, frame_s: single;
  f: byte;
begin
  init_controls(false, false, false, true);
  frame_m := m68000_0.tframes;
  frame_s := h6280_0.tframes;
  while EmuStatus = EsRunning do
  begin
    if EmulationPaused = false then
    begin
      for f := 0 to $FF do
      begin
        m68000_0.run(frame_m);
        frame_m := frame_m + m68000_0.tframes - m68000_0.contador;
        h6280_0.run(trunc(frame_s));
        frame_s := frame_s + h6280_0.tframes - h6280_0.contador;
        case f of
          247:
            begin
              m68000_0.irq[6] := HOLD_LINE;
              update_video_funkyjet;
              marcade.in1 := marcade.in1 or $8;
            end;
          255:
            marcade.in1 := marcade.in1 and $FFF7;
        end;
      end;
      events_funkyjet;
      video_sync;
    end
    else
      pause_action;
  end;
end;

function funkyjet_deco146_r(real_address: word): word;
var
  deco146_addr: dword;
  data: word;
  cs: byte;
begin
  // real_address:=0+(offset*2);
  deco146_addr := BITSWAP32(real_address, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18,
    13, 12, 11, 17, 16, 15, 14, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) and $7FFF;
  cs := 0;
  data := main_deco146.read_data(deco146_addr, cs);
  funkyjet_deco146_r := data;
end;

function funkyjet_getword(direccion: dword): word;
begin
  case direccion of
    $0 .. $7FFFF:
      funkyjet_getword := rom[direccion shr 1];
    $120000 .. $1207FF:
      funkyjet_getword := buffer_paleta[(direccion and $7FF) shr 1];
    $140000 .. $143FFF:
      funkyjet_getword := ram[(direccion and $3FFF) shr 1];
    $160000 .. $1607FF:
      funkyjet_getword := deco_sprites_0.ram[(direccion and $7FF) shr 1];
    $180000 .. $1807FF:
      funkyjet_getword := funkyjet_deco146_r(direccion and $7FF);
    // funkyjet_prot146(direccion and $7ff);
    $320000 .. $320FFF:
      funkyjet_getword := deco16ic_0.pf1.data[(direccion and $FFF) shr 1];
    $322000 .. $322FFF:
      funkyjet_getword := deco16ic_0.pf2.data[(direccion and $FFF) shr 1];
    $340000 .. $340BFF:
      funkyjet_getword := deco16ic_0.pf1.rowscroll[(direccion and $FFF) shr 1];
    $342000 .. $342BFF:
      funkyjet_getword := deco16ic_0.pf2.rowscroll[(direccion and $FFF) shr 1];
  end;
end;

procedure funkyjet_putword(direccion: dword; valor: word);

  procedure change_color(tmp_color, numero: word);
  var
    color: tcolor;
  begin
    color.b := pal4bit(tmp_color shr 8);
    color.g := pal4bit(tmp_color shr 4);
    color.r := pal4bit(tmp_color);
    set_pal_color(color, numero);
    case numero of
      $100 .. $1FF:
        deco16ic_0.pf1.buffer_color[(numero shr 4) and $F] := true;
      $200 .. $2FF:
        deco16ic_0.pf2.buffer_color[(numero shr 4) and $F] := true;
    end;
  end;

  procedure funkyjet_deco146_w(real_address, data: word);
  var
    deco146_addr: dword;
    cs: byte;
  begin
    // real_address:=0+(offset *2);
    deco146_addr := BITSWAP32(real_address, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18,
      13, 12, 11, 17, 16, 15, 14, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) and $7FFF;
    cs := 0;
    main_deco146.write_data(deco146_addr, data, cs);
  end;

begin
  case direccion of
    0 .. $7FFFF:
      ; // ROM
    $120000 .. $1207FF:
      if (buffer_paleta[(direccion and $7FF) shr 1] <> valor) then
      begin
        buffer_paleta[(direccion and $7FF) shr 1] := valor;
        change_color(valor, (direccion and $7FF) shr 1);
      end;
    $140000 .. $143FFF:
      ram[(direccion and $3FFF) shr 1] := valor;
    $160000 .. $1607FF:
      deco_sprites_0.ram[(direccion and $7FF) shr 1] := valor;
    $180000 .. $1807FF:
      funkyjet_deco146_w(direccion and $7FF, valor);
    $184000, $188000, $1A0002, $1A0400, $1A0402:
      ;
    $300000 .. $30000F:
      deco16ic_0.control_w((direccion and $F) shr 1, valor);
    $320000 .. $320FFF:
      begin
        deco16ic_0.pf1.data[(direccion and $FFF) shr 1] := valor;
        deco16ic_0.pf1.buffer[(direccion and $FFF) shr 1] := true
      end;
    $322000 .. $322FFF:
      begin
        deco16ic_0.pf2.data[(direccion and $FFF) shr 1] := valor;
        deco16ic_0.pf2.buffer[(direccion and $FFF) shr 1] := true
      end;
    $340000 .. $340BFF:
      deco16ic_0.pf1.rowscroll[(direccion and $FFF) shr 1] := valor;
    $342000 .. $342BFF:
      deco16ic_0.pf2.rowscroll[(direccion and $FFF) shr 1] := valor;
  end;
end;

// Main
procedure reset_funkyjet;
begin
  m68000_0.reset;
  main_deco146.reset;
  deco16ic_0.reset;
  deco_sprites_0.reset;
  deco16_snd_simple_reset;
  reset_audio;
  marcade.in0 := $FFFF;
  marcade.in1 := $FFF7;
end;

function start_funkyjet: boolean;
const
  pt_x: array [0 .. 15] of dword = (32 * 8 + 0, 32 * 8 + 1, 32 * 8 + 2, 32 * 8 + 3, 32 * 8 + 4,
    32 * 8 + 5, 32 * 8 + 6, 32 * 8 + 7, 0, 1, 2, 3, 4, 5, 6, 7);
  pt_y: array [0 .. 15] of dword = (0 * 16, 1 * 16, 2 * 16, 3 * 16, 4 * 16, 5 * 16, 6 * 16, 7 * 16,
    8 * 16, 9 * 16, 10 * 16, 11 * 16, 12 * 16, 13 * 16, 14 * 16, 15 * 16);
var
  memory_temp: pbyte;
begin
  start_funkyjet := false;
  machine_calls.general_loop := funkyjet_loop;
  machine_calls.reset := reset_funkyjet;
  machine_calls.fps_max := 58;
  start_audio(false);
  deco16ic_0 := chip_16ic.create(1, 2, $100, $100, $F, $F, 0, 1, 0, 16, nil, nil);
  deco_sprites_0 := tdeco16_sprite.create(2, 3, 304, 0, $1FFF);
  screen_init(3, 512, 512, false, true);
  start_video(320, 240);
  // Main CPU
  m68000_0 := cpu_m68000.create(14000000, $100);
  m68000_0.change_ram16_calls(funkyjet_getword, funkyjet_putword);
  // Sound CPU
  deco16_snd_simple_init(32220000 div 4, 32220000, nil);
  getmem(memory_temp, $100000);
  // cargar roms
  if not(roms_load16w(@rom, funkyjet_rom)) then
    exit;
  // cargar sonido
  if not(roms_load(@mem_snd, funkyjet_sound)) then
    exit;
  // OKI rom
  if not(roms_load(oki_6295_0.get_rom_addr, funkyjet_oki)) then
    exit;
  // convertir chars
  if not(roms_load(memory_temp, funkyjet_char)) then
    exit;
  deco74_decrypt_gfx(memory_temp, $80000);
  init_gfx(0, 8, 8, $4000);
  gfx[0].trans[0] := true;
  gfx_set_desc_data(4, 0, 16 * 8, $4000 * 16 * 8 + 8, $4000 * 16 * 8 + 0, 8, 0);
  convert_gfx(0, 0, memory_temp, @pt_x[8], @pt_y, false, false);
  // Tiles
  init_gfx(1, 16, 16, $1000);
  gfx[1].trans[0] := true;
  gfx_set_desc_data(4, 0, 64 * 8, $1000 * 64 * 8 + 8, $1000 * 64 * 8 + 0, 8, 0);
  convert_gfx(1, 0, memory_temp, @pt_x, @pt_y, false, false);
  // Sprites
  if not(roms_load(memory_temp, funkyjet_sprites)) then
    exit;
  init_gfx(2, 16, 16, $2000);
  gfx[2].trans[0] := true;
  gfx_set_desc_data(4, 0, 64 * 8, $2000 * 64 * 8 + 8, $2000 * 64 * 8 + 0, 8, 0);
  convert_gfx(2, 0, memory_temp, @pt_x, @pt_y, false, false);
  // Deco 146
  main_deco146 := cpu_deco_146.create;
  main_deco146.SET_INTERFACE_SCRAMBLE_INTERLEAVE;
  // Dip
  marcade.dswa := $FFFF;
  marcade.dswa_val := @funkyjet_dip_a;
  // final
  freemem(memory_temp);
  reset_funkyjet;
  start_funkyjet := true;
end;

end.
