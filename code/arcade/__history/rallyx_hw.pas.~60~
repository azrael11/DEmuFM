unit rallyx_hw;

interface

uses
  WinApi.Windows,
  nz80,
  main_engine,
  controls_engine,
  gfx_engine,
  namco_snd,
  samples,
  rom_engine,
  pal_engine,
  konami_snd,
  sound_engine;

function start_rallyx: boolean;

implementation

const
  // Jungler
  jungler_rom: array [0 .. 3] of tipo_roms = ((n: 'jungr1'; l: $1000; p: 0; crc: $5BD6AD15), (n: 'jungr2'; l: $1000; p: $1000; crc: $DC99F1E3), (n: 'jungr3'; l: $1000; p: $2000; crc: $3DCC03DA), (n: 'jungr4'; l: $1000; p: $3000; crc: $F92E9940));
  jungler_pal: array [0 .. 1] of tipo_roms = ((n: '18s030.8b'; l: $20; p: 0; crc: $55A7E6D1), (n: 'tbp24s10.9d'; l: $100; p: $20; crc: $D223F7B8));
  jungler_char: array [0 .. 1] of tipo_roms = ((n: '5k'; l: $800; p: 0; crc: $924262BF), (n: '5m'; l: $800; p: $800; crc: $131A08AC));
  jungler_sound: tipo_roms = (n: '1b'; l: $1000; p: 0; crc: $F86999C3);
  jungler_dots: tipo_roms = (n: '82s129.10g'; l: $100; p: 0; crc: $C59C51B7);
  jungler_dip: array [0 .. 4] of def_dip2 = ((mask: 7; name: 'Coin A'; number: 8; val8: (1, 2, 3, 0, 7, 6, 5, 4); name8: ('4C 1C', '3C 1C', '2C 1C', '4C 3C', '1C 1C', '1C 2C', '1C 3C', '1C 4C')), (mask: $38; name: 'Coin B'; number: 8; val8: (8, $10, $18, 0, $38, $30, $28, $20);
    name8: ('4C 1C', '3C 1C', '2C 1C', '4C 3C', '1C 1C', '1C 2C', '1C 3C', '1C 4C')), (mask: $40; name: 'Cabinet'; number: 2; val2: (0, $40); name2: ('Upright', 'Cocktail')), (mask: $80; name: '255 Lives'; number: 2; val2: ($80, 0); name2: ('Off', 'On')), ());
  // Rally X
  rallyx_rom: array [0 .. 3] of tipo_roms = ((n: '1b'; l: $1000; p: 0; crc: $5882700D), (n: 'rallyxn.1e'; l: $1000; p: $1000; crc: $ED1EBA2B), (n: 'rallyxn.1h'; l: $1000; p: $2000; crc: $4F98DD1C), (n: 'rallyxn.1k'; l: $1000; p: $3000; crc: $9AACCCF0));
  rallyx_pal: array [0 .. 1] of tipo_roms = ((n: 'rx-1.11n'; l: $20; p: 0; crc: $C7865434), (n: 'rx-7.8p'; l: $100; p: $20; crc: $834D4FDA));
  rallyx_char: tipo_roms = (n: '8e'; l: $1000; p: 0; crc: $277C1DE5);
  rallyx_sound: tipo_roms = (n: 'rx-5.3p'; l: $100; p: 0; crc: $4BAD7017);
  rallyx_dots: tipo_roms = (n: 'rx1-6.8m'; l: $100; p: 0; crc: $3C16F62C);
  rallyx_samples: tipo_nombre_samples = (nombre: 'bang.wav');
  // New Rally X
  nrallyx_rom: array [0 .. 3] of tipo_roms = ((n: 'nrx_prg1.1d'; l: $1000; p: 0; crc: $BA7DE9FC), (n: 'nrx_prg2.1e'; l: $1000; p: $1000; crc: $EEDFCCAE), (n: 'nrx_prg3.1k'; l: $1000; p: $2000; crc: $B4D5D34A), (n: 'nrx_prg4.1l'; l: $1000; p: $3000; crc: $7DA5496D));
  nrallyx_pal: array [0 .. 1] of tipo_roms = ((n: 'nrx1-1.11n'; l: $20; p: 0; crc: $A0A49017), (n: 'nrx1-7.8p'; l: $100; p: $20; crc: $4E46F485));
  nrallyx_char: array [0 .. 1] of tipo_roms = ((n: 'nrx_chg1.8e'; l: $800; p: 0; crc: $1FFF38A4), (n: 'nrx_chg2.8d'; l: $800; p: $800; crc: $85D9FFFD));
  nrallyx_sound: tipo_roms = (n: 'rx1-5.3p'; l: $100; p: 0; crc: $4BAD7017);
  nrallyx_dots: tipo_roms = (n: 'rx1-6.8m'; l: $100; p: 0; crc: $3C16F62C);
  // Dip
  rallyx_dip_a: array [0 .. 1] of def_dip2 = ((mask: 1; name: 'Cabinet'; number: 2; val2: (1, 0); name2: ('Upright', 'Cocktail')), ());
  rallyx_dip_b: array [0 .. 3] of def_dip2 = ((mask: 6; name: 'Bonus Life'; number: 4; val4: (2, 4, 6, 0); name4: ('15K-20K-10K-15K-20K-10K-15K-20K', '30K-40K-20K-30K-40K-20K-30K-40K', '40K-60K-30K-40K-60K-30K-50K-60K', 'Invalid')), (mask: $C0; name: 'Coinage'; number: 4;
    val4: ($40, $C0, $80, 0); name4: ('2C 1C', '1C 1C', '1C 2C', 'Free Play')), (mask: $38; name: 'Difficulty'; number: 8; val8: ($10, $28, 0, $18, $30, 8, $20, $38);
    name8: ('1 Car, Medium', '1 Car, Hard', '2 Car, Easy', '2 Car, Medium', '2 Car, Hard', '3 Car, Easy', '3 Car, Medium', '3 Car, Hard')), ());
  nrallyx_dip_b: array [0 .. 3] of def_dip2 = ((mask: 6; name: 'Bonus Life'; number: 4; val4: (2, 4, 6, 0); name4: ('20K/80K-20K-20K/80K', '20K/100K-40K-20K/100K', '20K/120K-60K-20K/120K', 'Invalid')), (mask: $C0; name: 'Coinage'; number: 4; val4: ($40, $C0, $80, 0);
    name4: ('2C 1C', '1C 1C', '1C 2C', 'Free Play')), (mask: $38; name: 'Difficulty'; number: 8; val8: ($10, $28, $18, $30, 0, $20, $38, 8);
    name8: ('1 Car, Medium', '1 Car, Hard', '2 Car, Medium', '2 Car, Hard', '3 Car, Easy', '3 Car, Medium', '3 Car, Hard', '4 Car, Easy')), ());

var
  last, scroll_x, scroll_y: byte;
  hacer_int: boolean;

procedure update_bg;
var
  f: word;
  nchar, color, x, y, atrib: byte;
  flipx, flipy: boolean;
begin
  for f := 0 to $3FF do
  begin
    if gfx[0].buffer[f] then
    begin
      y := f div 32;
      x := f mod 32;
      atrib := memory[$8C00 + f];
      color := (atrib and $3F) shl 2;
      nchar := memory[$8400 + f];
      flipx := (atrib and $40) = 0;
      flipy := (atrib and $80) <> 0;
      put_gfx_flip(x * 8, y * 8, nchar, color, 1, 0, flipx, flipy);
      if (atrib and $20) = 0 then
        put_gfx_block_trans(x * 8, y * 8, 3, 8, 8)
      else
        put_gfx_flip(x * 8, y * 8, nchar, color, 3, 0, flipx, flipy);
      gfx[0].buffer[f] := false;
    end;
  end;
end;

procedure update_fg;
var
  x, y, atrib, nchar, color: byte;
  pos: word;
begin
  for x := 0 to 7 do
  begin
    for y := 0 to 31 do
    begin
      pos := x + (y shl 5);
      if gfx[2].buffer[pos] then
      begin
        atrib := memory[$8800 + pos];
        nchar := memory[$8000 + pos];
        color := (atrib and $3F) shl 2;
        put_gfx_flip(x * 8, y * 8, nchar, color, 2, 0, (atrib and $40) = 0, (atrib and $80) <> 0);
        gfx[2].buffer[pos] := false;
      end;
    end;
  end;
end;

procedure draw_sprites;
var
  f, nchar, atrib, color, y: byte;
  x: word;
  flipx, flipy: boolean;
begin
  for f := $F downto $A do
  begin
    atrib := memory[$8000 + (f * 2)];
    nchar := atrib shr 2;
    color := (memory[$8801 + (f * 2)] and $3F) shl 2;
    x := memory[$8001 + (f * 2)] + ((memory[$8801 + (f * 2)] and $80) shl 1);
    if main_screen.flip_main_screen then
    begin
      y := memory[$8800 + (f * 2)];
      if x > 272 then
        x := 272
      else
        x := 272 - x;
      flipx := (atrib and 1) = 0;
      flipy := (atrib and 2) = 0;
    end
    else
    begin
      y := 241 - memory[$8800 + (f * 2)];
      flipx := (atrib and 1) <> 0;
      flipy := (atrib and 2) <> 0;
    end;
    put_gfx_sprite_mask(nchar, color, flipx, flipy, 1, 0, $F);
    update_gfx_sprite(x, y - 1, 4, 1);
  end;
end;

procedure update_video_jungler;
var
  f, nchar, y: byte;
  x: word;
begin
  update_bg;
  update_region(0, 0, 256, 256, 1, 0, 0, 256, 256, 4);
  // Sprites
  draw_sprites;
  // Disparos
  for f := $14 to $20 do
  begin
    nchar := (memory[$A000 + f] and 7) xor 7;
    x := 284 - (memory[$8020 + f] + ((memory[$A000 + f] xor $FF) and 8) shl 5);
    if x > 288 then
      x := x and $FF;
    if main_screen.flip_main_screen then
      y := memory[$8820 + f]
    else
      y := 241 - memory[$8820 + f];
    put_gfx_sprite(nchar, 16, false, false, 2);
    update_gfx_sprite(x, y - 1, 4, 2);
  end;
  update_fg;
  update_region(32, 0, 32, 256, 2, 224, 0, 32, 256, 4);
  update_region(0, 0, 32, 256, 2, 256, 0, 32, 256, 4);
  update_final_piece(0, 16, 288, 224, 4);
end;

procedure update_video_rallyx;
var
  f, nchar, y, atrib: byte;
  x: word;
begin
  update_bg;
  scroll_x_y(1, 4, scroll_x - 3, scroll_y);
  // Sprites
  draw_sprites;
  scroll_x_y(3, 4, scroll_x - 3, scroll_y);
  update_fg;
  update_region(32, 0, 32, 256, 2, 224, 0, 32, 256, 4);
  update_region(0, 0, 32, 256, 2, 256, 0, 32, 256, 4);
  // Radar
  for f := 0 to $B do
  begin
    y := 237 - memory[$8834 + f];
    atrib := memoria[$A004 + f];
    nchar := ((atrib and $E) shr 1) xor 7;
    x := memory[$8034 + f] + ((not(atrib) and 8) shl 5);
    if x < 32 then
      x := x + 256;
    put_gfx_sprite(nchar, 16, false, false, 2);
    update_gfx_sprite(x, y + 15, 4, 2);
  end;
  update_final_piece(0, 16, 288, 224, 4);
end;

procedure events_jungler;
begin
  if event.arcade then
  begin
    // P1
    if p_contrls.map_arcade.up[1] then
      marcade.in0 := (marcade.in0 and $FE)
    else
      marcade.in0 := (marcade.in0 or 1);
    if p_contrls.map_arcade.but0[0] then
      marcade.in0 := (marcade.in0 and $F7)
    else
      marcade.in0 := (marcade.in0 or 8);
    if p_contrls.map_arcade.left[0] then
      marcade.in0 := (marcade.in0 and $EF)
    else
      marcade.in0 := (marcade.in0 or $10);
    if p_contrls.map_arcade.right[0] then
      marcade.in0 := (marcade.in0 and $DF)
    else
      marcade.in0 := (marcade.in0 or $20);
    if p_contrls.map_arcade.coin[1] then
      marcade.in0 := (marcade.in0 and $BF)
    else
      marcade.in0 := (marcade.in0 or $40);
    if p_contrls.map_arcade.coin[0] then
      marcade.in0 := (marcade.in0 and $7F)
    else
      marcade.in0 := (marcade.in0 or $80);
    // P2
    if p_contrls.map_arcade.up[0] then
      marcade.in1 := (marcade.in1 and $FE)
    else
      marcade.in1 := (marcade.in1 or 1);
    if p_contrls.map_arcade.down[1] then
      marcade.in1 := (marcade.in1 and $FD)
    else
      marcade.in1 := (marcade.in1 or 2);
    if p_contrls.map_arcade.left[1] then
      marcade.in1 := (marcade.in1 and $EF)
    else
      marcade.in1 := (marcade.in1 or $10);
    if p_contrls.map_arcade.right[1] then
      marcade.in1 := (marcade.in1 and $DF)
    else
      marcade.in1 := (marcade.in1 or $20);
    if p_contrls.map_arcade.start[1] then
      marcade.in1 := (marcade.in1 and $BF)
    else
      marcade.in1 := (marcade.in1 or $40);
    if p_contrls.map_arcade.start[0] then
      marcade.in1 := (marcade.in1 and $7F)
    else
      marcade.in1 := (marcade.in1 or $80);
    // DSW
    if p_contrls.map_arcade.down[0] then
      marcade.in2 := (marcade.in2 and $7F)
    else
      marcade.in2 := (marcade.in2 or $80);
  end;
end;

procedure events_rallyx;
begin
  if event.arcade then
  begin
    // P1
    if p_contrls.map_arcade.but0[0] then
      marcade.in0 := (marcade.in0 and $FD)
    else
      marcade.in0 := (marcade.in0 or $2);
    if p_contrls.map_arcade.left[0] then
      marcade.in0 := (marcade.in0 and $FB)
    else
      marcade.in0 := (marcade.in0 or $4);
    if p_contrls.map_arcade.right[0] then
      marcade.in0 := (marcade.in0 and $F7)
    else
      marcade.in0 := (marcade.in0 or $8);
    if p_contrls.map_arcade.down[0] then
      marcade.in0 := (marcade.in0 and $EF)
    else
      marcade.in0 := (marcade.in0 or $10);
    if p_contrls.map_arcade.up[0] then
      marcade.in0 := (marcade.in0 and $DF)
    else
      marcade.in0 := (marcade.in0 or $20);
    if p_contrls.map_arcade.start[0] then
      marcade.in0 := (marcade.in0 and $BF)
    else
      marcade.in0 := (marcade.in0 or $40);
    if p_contrls.map_arcade.coin[0] then
      marcade.in0 := (marcade.in0 and $7F)
    else
      marcade.in0 := (marcade.in0 or $80);
    // P2
    if p_contrls.map_arcade.but0[1] then
      marcade.in1 := (marcade.in1 and $FD)
    else
      marcade.in1 := (marcade.in1 or $2);
    if p_contrls.map_arcade.left[1] then
      marcade.in1 := (marcade.in1 and $FB)
    else
      marcade.in1 := (marcade.in1 or $4);
    if p_contrls.map_arcade.right[1] then
      marcade.in1 := (marcade.in1 and $F7)
    else
      marcade.in1 := (marcade.in1 or $8);
    if p_contrls.map_arcade.down[1] then
      marcade.in1 := (marcade.in1 and $EF)
    else
      marcade.in1 := (marcade.in1 or $10);
    if p_contrls.map_arcade.up[1] then
      marcade.in1 := (marcade.in1 and $DF)
    else
      marcade.in1 := (marcade.in1 or $20);
    if p_contrls.map_arcade.start[1] then
      marcade.in1 := (marcade.in1 and $BF)
    else
      marcade.in1 := (marcade.in1 or $40);
    if p_contrls.map_arcade.coin[1] then
      marcade.in1 := (marcade.in1 and $7F)
    else
      marcade.in1 := (marcade.in1 or $80);
  end;
end;

procedure jungler_loop;
var
  f: byte;
begin
  init_controls(false, false, false, true);
  while EmuStatus = EsRunning do
  begin
    if EmulationPaused = false then
    begin
      for f := 0 to $FF do
      begin
        if f = 240 then
        begin
          if hacer_int then
            z80_0.change_nmi(PULSE_LINE);
          update_video_jungler;
        end;
        // Main CPU
        z80_0.run(frame_main);
        frame_main := frame_main + z80_0.tframes - z80_0.contador;
        // Sound
        konamisnd_0.run;
      end;
      events_jungler;
      video_sync;
    end
    else
      pause_action;
  end;
end;

procedure rallyx_loop;
var
  frame: single;
  f: byte;
begin
  init_controls(false, false, false, true);
  frame := z80_0.tframes;
  while EmuStatus = EsRunning do
  begin
    if EmulationPaused = false then
    begin
      for f := 0 to $FF do
      begin
        if f = 240 then
        begin
          if hacer_int then
            z80_0.change_irq(ASSERT_LINE);
          update_video_rallyx;
        end;
        z80_0.run(frame_main);
        frame_main := frame_main + z80_0.tframes - z80_0.contador;
      end;
      events_rallyx;
      video_sync;
    end
    else
      pause_action;
  end;
end;

function jungler_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $8FFF, $9800 .. $9FFF:
      jungler_getbyte := memory[direccion];
    $A000:
      jungler_getbyte := marcade.in0;
    $A080:
      jungler_getbyte := marcade.in1;
    $A100:
      jungler_getbyte := marcade.in2;
    $A180:
      jungler_getbyte := marcade.dswa;
  end;
end;

procedure jungler_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $7FFF:
      ; // ROM
    $8000 .. $83FF, $8800 .. $8BFF:
      if memory[direccion] <> valor then
      begin
        gfx[2].buffer[direccion and $3FF] := true;
        memory[direccion] := valor;
      end;
    $8400 .. $87FF, $8C00 .. $8FFF:
      if memory[direccion] <> valor then
      begin
        gfx[0].buffer[direccion and $3FF] := true;
        memory[direccion] := valor;
      end;
    $9800 .. $9FFF:
      memory[direccion] := valor;
    $A000 .. $A07F:
      memory[$A000 + (direccion and $F)] := valor;
    $A100:
      konamisnd_0.sound_latch := valor;
    $A130:
      scroll_x := valor;
    $A140:
      scroll_y := valor;
    $A180 .. $A187:
      begin
        valor := valor and 1;
        case (direccion and 7) of
          0:
            begin
              if ((last = 0) and (valor <> 0)) then
                konamisnd_0.pedir_irq := HOLD_LINE;
              last := valor;
            end;
          1:
            hacer_int := (valor <> 0);
          2:
            konamisnd_0.enabled := (valor = 0);
          3:
            main_screen.flip_main_screen := (valor <> 0);
          7:
            ; // stars_ena:=(valor<>0);
        end;
      end;
  end;
end;

// Rally X
function rallyx_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $3FFF, $8000 .. $8FFF, $9800 .. $9FFF:
      rallyx_getbyte := memory[direccion];
    $A000:
      rallyx_getbyte := marcade.in0;
    $A080:
      rallyx_getbyte := marcade.in1 or marcade.dswa;
    $A100:
      rallyx_getbyte := marcade.dswb;
  end;
end;

procedure rallyx_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $3FFF:
      ; // ROM
    $8000 .. $83FF, $8800 .. $8BFF:
      if memoria[direccion] <> valor then
      begin
        gfx[2].buffer[direccion and $3FF] := true;
        memoria[direccion] := valor;
      end;
    $8400 .. $87FF, $8C00 .. $8FFF:
      if memoria[direccion] <> valor then
      begin
        gfx[0].buffer[direccion and $3FF] := true;
        memoria[direccion] := valor;
      end;
    $9800 .. $9FFF, $A000 .. $A00F:
      memory[direccion] := valor;
    $A100 .. $A11F:
      namco_snd_0.regs[direccion and $1F] := valor;
    $A130:
      scroll_x := valor;
    $A140:
      scroll_y := valor;
    $A180 .. $A187:
      begin
        valor := valor and 1;
        case (direccion and 7) of
          0:
            begin // Explosion
              if ((valor = 0) and (last <> 0)) then
                start_sample(0);
              last := valor;
            end;
          1:
            begin
              hacer_int := (valor <> 0);
              if not(hacer_int) then
                z80_0.change_irq(CLEAR_LINE);
            end;
          2:
            namco_snd_0.enabled := (valor <> 0);
          3:
            main_screen.flip_main_screen := (valor <> 0);
        end;
      end;
  end;
end;

procedure rallyx_outbyte(puerto: word; valor: byte);
begin
  if (puerto and $FF) = 0 then
  begin
    z80_0.im0 := valor;
    z80_0.change_irq(CLEAR_LINE);
  end;
end;

procedure rallyx_playsound;
begin
  samples_update;
  namco_snd_0.update;
end;

// Main
procedure reset_rallyxh;
begin
  z80_0.reset;
  frame_main := z80_0.tframes;
  marcade.in0 := $FF;
  case main_vars.machine_type of
    29:
      begin
        marcade.in1 := $FF;
        marcade.in2 := $FF;
        konamisnd_0.reset;
      end;
    50, 70:
      begin
        marcade.in1 := $FE;
        namco_snd_0.reset;
        reset_samples;
      end;
  end;
  reset_audio;
  last := 0;
  hacer_int := false;
  scroll_x := 0;
  scroll_y := 0;
end;

function start_rallyx: boolean;
var
  colores: tpaleta;
  f: word;
  ctemp1: byte;
  memory_temp: array [0 .. $3FFF] of byte;
const
  ps_rx: array [0 .. 15] of dword = (8 * 8 + 0, 8 * 8 + 1, 8 * 8 + 2, 8 * 8 + 3, 16 * 8 + 0, 16 * 8 + 1, 16 * 8 + 2, 16 * 8 + 3, 24 * 8 + 0, 24 * 8 + 1, 24 * 8 + 2, 24 * 8 + 3, 0, 1, 2, 3);
  ps_x: array [0 .. 15] of dword = (8 * 8, 8 * 8 + 1, 8 * 8 + 2, 8 * 8 + 3, 0, 1, 2, 3, 24 * 8 + 0, 24 * 8 + 1, 24 * 8 + 2, 24 * 8 + 3, 16 * 8 + 0, 16 * 8 + 1, 16 * 8 + 2, 16 * 8 + 3);
  ps_y: array [0 .. 15] of dword = (0 * 8, 1 * 8, 2 * 8, 3 * 8, 4 * 8, 5 * 8, 6 * 8, 7 * 8, 32 * 8, 33 * 8, 34 * 8, 35 * 8, 36 * 8, 37 * 8, 38 * 8, 39 * 8);
  pd_y: array [0 .. 3] of dword = (0 * 32, 1 * 32, 2 * 32, 3 * 32);

  procedure cargar_chars(tipo: byte);
  begin
    init_gfx(0, 8, 8, 256);
    if tipo = 1 then
    begin
      gfx[0].trans[0] := true;
      gfx_set_desc_data(2, 0, 16 * 8, 4, 0);
    end
    else
    begin
      gfx[0].trans[3] := true;
      gfx_set_desc_data(2, 0, 16 * 8, 0, 4);
    end;
    convert_gfx(0, 0, @memory_temp, @ps_x, @ps_y, false, false);
  end;

  procedure cargar_sprites(tipo: byte);
  begin
    init_gfx(1, 16, 16, 64);
    gfx[1].trans[0] := true;
    if tipo = 1 then
    begin
      gfx_set_desc_data(2, 0, 64 * 8, 4, 0);
      convert_gfx(1, 0, @memory_temp, @ps_x, @ps_y, false, false);
    end
    else
    begin
      gfx_set_desc_data(2, 0, 64 * 8, 0, 4);
      convert_gfx(1, 0, @memory_temp, @ps_rx, @ps_y, false, false);
    end;
  end;

  procedure cargar_disparo;
  begin
    init_gfx(2, 4, 4, 8);
    gfx[2].trans[3] := true;
    gfx_set_desc_data(2, 0, 16 * 8, 6, 7);
    convert_gfx(2, 0, @memory_temp, @ps_y, @pd_y, false, false)
  end;

begin
  case main_vars.machine_type of
    29:
      machine_calls.general_loop := jungler_loop;
    50, 70:
      begin
        machine_calls.general_loop := rallyx_loop;
        machine_calls.fps_max := 60.606060606060;
      end;
  end;
  machine_calls.reset := reset_rallyxh;
  start_rallyx := false;
  start_audio(false);
  if main_vars.machine_type = 29 then
    main_screen.rot90_screen := true;
  screen_init(1, 256, 256);
  screen_mod_scroll(1, 256, 256, 255, 256, 256, 255);
  screen_init(2, 64, 256);
  screen_init(3, 256, 256, true);
  screen_mod_scroll(3, 256, 256, 255, 256, 256, 255);
end;
screen_init(4, 512, 512, false, true);
start_video(288, 224);
// Main CPU
z80_0 := cpu_z80.create(3072000, $100);
case main_vars.machine_type of
  29:
    begin // jungler
      z80_0.change_ram_calls(jungler_getbyte, jungler_putbyte);
      // Sound Chip
      konamisnd_0 := konamisnd_chip.create(1, TIPO_JUNGLER, 1789772, $100);
      if not(roms_load(@konamisnd_0.memory, jungler_sound)) then
        exit;
      // cargar roms
      if not(roms_load(@memory, jungler_rom)) then
        exit;
      // convertir chars
      if not(roms_load(@memory_temp, jungler_char)) then
        exit;
      cargar_chars(1);
      // convertir sprites
      cargar_sprites(1);
      // Y ahora el'disparo'
      if not(roms_load(@memory_temp, jungler_dots)) then
        exit;
      cargar_disparo;
      // poner la paleta
      if not(roms_load(@memory_temp, jungler_pal)) then
        exit;
      // DIP
      marcade.dswa := $BF;
      marcade.dswa_val2 := @jungler_dip;
    end;
  50:
    begin // rallyx
      z80_0.change_ram_calls(rallyx_getbyte, rallyx_putbyte);
      z80_0.change_io_calls(nil, rallyx_outbyte);
      z80_0.init_sound(rallyx_playsound);
      // cargar roms
      if not(roms_load(@memory, rallyx_rom)) then
        exit;
      // cargar sonido y samples
      namco_snd_0 := namco_snd_chip.create(3);
      if not(roms_load(namco_snd_0.get_wave_dir, rallyx_sound)) then
        exit;
      load_samples(rallyx_samples);
      // convertir chars
      if not(roms_load(@memory_temp, rallyx_char)) then
        exit;
      cargar_chars(0);
      // convertir sprites
      cargar_sprites(0);
      // Y ahora el'disparo'
      if not(roms_load(@memory_temp, rallyx_dots)) then
        exit;
      cargar_disparo;
      // poner la paleta
      if not(roms_load(@memory_temp, rallyx_pal)) then
        exit;
      marcade.dswa := 1;
      marcade.dswb := $CB;
      marcade.dswa_val2 := @rallyx_dip_a;
      marcade.dswb_val2 := @rallyx_dip_b;
    end;
  70:
    begin // new rally x
      z80_0.change_ram_calls(rallyx_getbyte, rallyx_putbyte);
      z80_0.change_io_calls(nil, rallyx_outbyte);
      z80_0.init_sound(rallyx_playsound);
      // cargar roms y ordenarlas
      if not(roms_load(@memory_temp, nrallyx_rom)) then
        exit;
      copymemory(@memory[0], @memory_temp[0], $800);
      copymemory(@memory[$1000], @memory_temp[$800], $800);
      copymemory(@memory[$800], @memory_temp[$1000], $800);
      copymemory(@memory[$1800], @memory_temp[$1800], $800);
      copymemory(@memory[$2000], @memory_temp[$2000], $800);
      copymemory(@memory[$3000], @memory_temp[$2800], $800);
      copymemory(@memory[$2800], @memory_temp[$3000], $800);
      copymemory(@memory[$3800], @memory_temp[$3800], $800);
      // cargar sonido y samples
      namco_snd_0 := namco_snd_chip.create(3);
      if not(roms_load(namco_snd_0.get_wave_dir, nrallyx_sound)) then
        exit;
      load_samples(rallyx_samples, 1, 'rallyx.zip');
      // convertir chars
      if not(roms_load(@memory_temp, nrallyx_char)) then
        exit;
      cargar_chars(0);
      // convertir sprites
      cargar_sprites(0);
      // Y ahora el'disparo'
      if not(roms_load(@memory_temp, nrallyx_dots)) then
        exit;
      cargar_disparo;
      // poner la paleta
      if not(roms_load(@memory_temp, nrallyx_pal)) then
        exit;
      marcade.dswa := 1;
      marcade.dswb := $C3;
      marcade.dswa_val2 := @rallyx_dip_a;
      marcade.dswb_val2 := @nrallyx_dip_b;
    end;
end;
for f := 0 to 31 do
begin
  ctemp1 := memory_temp[f];
  colores[f].r := $21 * (ctemp1 and 1) + $47 * ((ctemp1 shr 1) and 1) + $97 * ((ctemp1 shr 2) and 1);
  colores[f].g := $21 * ((ctemp1 shr 3) and 1) + $47 * ((ctemp1 shr 4) and 1) + $97 * ((ctemp1 shr 5) and 1);
  colores[f].b := 0 + $50 * ((ctemp1 shr 6) and 1) + $AB * ((ctemp1 shr 7) and 1);
end;
set_pal(colores, 32);
// color lookup
for f := 0 to 255 do
begin
  gfx[1].colores[f] := memory_temp[$20 + f] and $F;
  gfx[0].colores[f] := memory_temp[$20 + f] and $F;
end;
// final
reset_rallyxh;
start_rallyx := true;
end;

end.
