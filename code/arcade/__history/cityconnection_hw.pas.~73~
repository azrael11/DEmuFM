unit cityconnection_hw;

interface

uses
  WinApi.Windows,
  m6809,
  ay_8910,
  ym_2203,
  main_engine,
  controls_engine,
  gfx_engine,
  rom_engine,
  pal_engine,
  sound_engine,
  qsnapshot;

function start_cityconnection: boolean;

implementation

const
  citycon_rom: array [0 .. 1] of tipo_roms = ((n: 'c10'; l: $4000; p: $4000; crc: $AE88B53C), (n: 'c11'; l: $8000; p: $8000; crc: $139EB1AA));
  citycon_sonido: tipo_roms = (n: 'c1'; l: $8000; p: $8000; crc: $1FAD7589);
  citycon_char: tipo_roms = (n: 'c4'; l: $2000; p: 0; crc: $A6B32FC6);
  citycon_sprites: array [0 .. 1] of tipo_roms = ((n: 'c12'; l: $2000; p: 0; crc: $08EAACCD), (n: 'c13'; l: $2000; p: $2000; crc: $1819AAFB));
  citycon_tiles: array [0 .. 3] of tipo_roms = ((n: 'c9'; l: $8000; p: 0; crc: $8AEB47E6), (n: 'c8'; l: $4000; p: $8000; crc: $0D7A1EEB), (n: 'c6'; l: $8000; p: $C000; crc: $2246FE9D), (n: 'c7'; l: $4000; p: $14000; crc: $E8B97DE9));
  citycon_fondo: array [0 .. 2] of tipo_roms = ((n: 'c2'; l: $8000; p: 0; crc: $F2DA4F23), (n: 'c3'; l: $4000; p: $8000; crc: $7EF3AC1B), (n: 'c5'; l: $2000; p: $C000; crc: $C03D8B1B));
  // Dip
  citycon_dip_a: array [0 .. 3] of def_dip2 = ((mask: 3; name: 'Lives'; number: 4; val4: (0, 1, 2, 3); name4: ('3', '4', '5', 'Infinite')), (mask: $20; name: 'Demo Sounds'; number: 2; val2: ($20, 0); name2: ('Off', 'On')), (mask: $40; name: 'Cabinet'; number: 2; val2: (0, $40);
    name2: ('Upright', 'Cocktail')), ());
  citycon_dip_b: array [0 .. 2] of def_dip2 = ((mask: 7; name: 'Coinage'; number: 8; val8: (7, 6, 5, 4, 0, 1, 2, 3); name8: ('5C 1C', '4C 1C', '3C 1C', '2C 1C', '1C 1C', '1C 2C', '1C 3C', '1C 4C')), (mask: 8; name: 'Difficulty'; number: 2; val2: (0, 8);
    name2: ('Easy', 'Hard')), ());

var
  fondo, soundlatch, soundlatch2: byte;
  scroll_x: word;
  lines_color_look: array [0 .. $FF] of byte;
  memory_font: array [0 .. $DFFF] of byte;
  change_fonts: boolean;

procedure update_video_citycon;
  procedure draw_bg;
  var
    f, x, y, nchar, color: word;
  begin
    for f := $FFF downto 0 do
    begin
      y := f shr 5;
      x := ((f and $1F) + (y and $60)) shl 3;
      y := (y and $1F) shl 3;
      nchar := memory_font[$1000 * fondo + f] + (fondo shl 8);
      color := memory_font[$C000 + nchar] and $F;
      put_gfx(x, y, nchar, (color shl 4) + 256, 2, 1);
    end;
    change_fondo := false;
  end;

var
  f, x, y, color, nchar: word;
  y2, x2, atrib: byte;
  temp: pword;
  pos: pbyte;
begin
  if cambia_fondo then
    draw_bg;
  scroll__x(2, 3, scroll_x);
  for f := $FFF downto 0 do
  begin
    if gfx[0].buffer[f] then
    begin
      y := f shr 5;
      x := (f and $1F) + (y and $60);
      y := y and $1F;
      nchar := memory[$1000 + f];
      pos := gfx[0].datos;
      inc(pos, nchar shl 6);
      for y2 := 0 to 7 do
      begin
        temp := punbuf;
        color := (lines_color_look[y2 + (y shl 3)] shl 2) + 512;
        for x2 := 0 to 7 do
        begin
          if not(gfx[0].trans[pos^]) then
            temp^ := paleta[pos^ + color]
          else
            temp^ := paleta[MAX_COLORS];
          inc(temp);
          inc(pos);
        end;
        putpixel(x shl 3, (y shl 3) + y2, 8, punbuf, 1);
      end;
      gfx[0].buffer[f] := false;
    end;
  end;
  update_region(0, 0, 256, 48, 1, 0, 0, 256, 48, 3);
  scroll__x_part2(1, 3, 208, @scroll_x, 0, 0, 48);
  for f := $3F downto 0 do
  begin
    x := memory[$2803 + (f * 4)];
    y := 239 - memory[$2800 + (f * 4)];
    nchar := memory[$2801 + (f * 4)];
    atrib := memory[$2802 + (f * 4)];
    color := (atrib and $F) shl 4;
    put_gfx_sprite(nchar, color, (atrib and $10) = 0, false, 2);
    update_gfx_sprite(x, y, 3, 2);
  end;
  update_final_piece(8, 16, 240, 224, 3);
end;

procedure events_citycon;
begin
  if event.arcade then
  begin
    // P1
    if p_contrls.map_arcade.up[0] then
      marcade.in0 := (marcade.in0 and $FE)
    else
      marcade.in0 := (marcade.in0 or 1);
    if p_contrls.map_arcade.down[0] then
      marcade.in0 := (marcade.in0 and $FD)
    else
      marcade.in0 := (marcade.in0 or 2);
    if p_contrls.map_arcade.right[0] then
      marcade.in0 := (marcade.in0 and $FB)
    else
      marcade.in0 := (marcade.in0 or 4);
    if p_contrls.map_arcade.left[0] then
      marcade.in0 := (marcade.in0 and $F7)
    else
      marcade.in0 := (marcade.in0 or 8);
    if p_contrls.map_arcade.but0[0] then
      marcade.in0 := (marcade.in0 and $EF)
    else
      marcade.in0 := (marcade.in0 or $10);
    if p_contrls.map_arcade.but1[0] then
      marcade.in0 := (marcade.in0 and $DF)
    else
      marcade.in0 := (marcade.in0 or $20);
    if p_contrls.map_arcade.start[0] then
      marcade.in0 := (marcade.in0 and $BF)
    else
      marcade.in0 := (marcade.in0 or $40);
    if p_contrls.map_arcade.start[1] then
      marcade.in0 := (marcade.in0 and $7F)
    else
      marcade.in0 := (marcade.in0 or $80);
    // P2
    if p_contrls.map_arcade.up[1] then
      marcade.in2 := (marcade.in2 and $FE)
    else
      marcade.in2 := (marcade.in2 or 1);
    if p_contrls.map_arcade.down[1] then
      marcade.in2 := (marcade.in2 and $FD)
    else
      marcade.in2 := (marcade.in2 or 2);
    if p_contrls.map_arcade.right[1] then
      marcade.in2 := (marcade.in2 and $FB)
    else
      marcade.in2 := (marcade.in2 or 4);
    if p_contrls.map_arcade.left[1] then
      marcade.in2 := (marcade.in2 and $F7)
    else
      marcade.in2 := (marcade.in2 or 8);
    if p_contrls.map_arcade.but0[1] then
      marcade.in2 := (marcade.in2 and $EF)
    else
      marcade.in2 := (marcade.in2 or $10);
    if p_contrls.map_arcade.but1[1] then
      marcade.in2 := (marcade.in2 and $DF)
    else
      marcade.in2 := (marcade.in2 or $20);
    // SYS
    if p_contrls.map_arcade.coin[0] then
      marcade.in1 := (marcade.in1 and $7F)
    else
      marcade.in1 := (marcade.in1 or $80);
  end;
end;

procedure citycon_loop;
var
  f: word;
begin
  init_controls(false, false, false, true);
  while EmuStatus = EsRunning do
  begin
    if EmulationPaused = false then
    begin
      for f := 0 to 261 do
      begin
        if f = 240 then
        begin
          m6809_0.change_irq(ASSERT_LINE);
          update_video_citycon;
        end;
        // Main CPU
        m6809_0.run(frame_main);
        frame_main := frame_main + m6809_0.tframes - m6809_0.contador;
        // Sound CPU
        m6809_1.run(frame_snd);
        frame_snd := frame_snd + m6809_1.tframes - m6809_1.contador;
      end;
      events_citycon;
      video_sync;
    end
    else
      pause_action;
  end;
end;

function citycon_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $1FFF, $2800 .. $28FF, $4000 .. $FFFF:
      citycon_getbyte := memory[direccion];
    $2000 .. $20FF:
      citycon_getbyte := lines_color_look[direccion and $FF];
    $3000:
      if main_screen.flip_main_screen then
        citycon_getbyte := marcade.in2
      else
        citycon_getbyte := marcade.in0;
    $3001:
      citycon_getbyte := marcade.dswa + marcade.in1;
    $3002:
      citycon_getbyte := marcade.dswb;
    $3007:
      m6809_0.change_irq(CLEAR_LINE);
    $3800 .. $3CFF:
      citycon_getbyte := buffer_paleta[direccion and $7FF];
  end;
end;

procedure change_color(dir: word);
var
  tmp_color: byte;
  color: tcolor;
  pos: word;
begin
  tmp_color := buffer_paleta[dir];
  color.r := pal4bit(tmp_color shr 4);
  color.g := pal4bit(tmp_color);
  tmp_color := buffer_paleta[dir + 1];
  color.b := pal4bit(tmp_color shr 4);
  pos := dir shr 1;
  set_pal_color(color, pos);
  case pos of
    256 .. 511:
      change_fonts := true;
    512 .. 639:
      fillchar(gfx[0].buffer[0], $1000, 1);
  end;
end;

procedure citycon_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $FFF, $2800 .. $28FF:
      memory[direccion] := valor;
    $1000 .. $1FFF:
      if memory[direccion] <> valor then
      begin
        gfx[0].buffer[direccion and $FFF] := true;
        memory[direccion] := valor;
      end;
    $2000 .. $20FF:
      lines_color_look[direccion and $FF] := valor;
    $3000:
      begin
        if fondo <> (valor shr 4) then
        begin
          fondo := valor shr 4;
          change_fonts := true;
        end;
        main_screen.flip_main_screen := (valor and 1) <> 0;
      end;
    $3001:
      soundlatch := valor;
    $3002:
      soundlatch2 := valor;
    $3004:
      scroll_x := (scroll_x and $FF) or ((valor and 3) shl 8);
    $3005:
      scroll_x := (scroll_x and $300) or valor;
    $3800 .. $3CFF:
      if buffer_paleta[direccion and $7FF] <> valor then
      begin
        buffer_paleta[direccion and $7FF] := valor;
        change_color(direccion and $7FE);
      end;
    $4000 .. $FFFF:
      ;
  end;
end;

function scitycon_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $FFF, $8000 .. $FFFF:
      scitycon_getbyte := mem_snd[direccion];
    $4000:
      scitycon_getbyte := ay8910_0.Read;
    $6000:
      scitycon_getbyte := ym2203_0.status;
    $6001:
      scitycon_getbyte := ym2203_0.Read;
  end;
end;

procedure scitycon_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $FFF:
      mem_snd[direccion] := valor;
    $4000:
      ay8910_0.Control(valor);
    $4001:
      ay8910_0.Write(valor);
    $6000:
      ym2203_0.Control(valor);
    $6001:
      ym2203_0.Write(valor);
    $8000 .. $FFFF:
      ; // ROM
  end;
end;

function citycon_porta: byte;
begin
  citycon_porta := soundlatch;
end;

function citycon_portb: byte;
begin
  citycon_portb := soundlatch2;
end;

procedure citycon_sound_update;
begin
  ay8910_0.update;
  ym2203_0.update;
end;

procedure citycon_qsave(nombre: string);
var
  data: pbyte;
  buffer: array [0 .. 5] of byte;
  size: word;
begin
  open_qsnapshot_save('cityconn' + nombre);
  getmem(data, 20000);
  // CPU
  size := m6809_0.save_snapshot(data);
  savedata_qsnapshot(data, size);
  size := m6809_1.save_snapshot(data);
  savedata_qsnapshot(data, size);
  // SND
  size := ym2203_0.save_snapshot(data);
  savedata_qsnapshot(data, size);
  size := ay8910_0.save_snapshot(data);
  savedata_qsnapshot(data, size);
  // MEM
  savedata_qsnapshot(@memory, $4000);
  savedata_qsnapshot(@mem_snd, $8000);
  // MISC
  buffer[0] := fondo;
  buffer[1] := soundlatch;
  buffer[2] := soundlatch2;
  buffer[3] := scroll_x and $FF;
  buffer[4] := scroll_x shr 8;
  buffer[5] := byte(change_fonts);
  savedata_qsnapshot(@buffer[0], 6);
  savedata_qsnapshot(@lines_color_look, $100);
  savedata_qsnapshot(@buffer_paleta, $500 * 2);
  freemem(data);
  close_qsnapshot;
end;

procedure citycon_qload(nombre: string);
var
  data: pbyte;
  buffer: array [0 .. 5] of byte;
  f: word;
begin
  if not(open_qsnapshot_load('cityconn' + nombre)) then
    exit;
  getmem(data, 20000);
  // CPU
  loaddata_qsnapshot(data);
  m6809_0.load_snapshot(data);
  loaddata_qsnapshot(data);
  m6809_1.load_snapshot(data);
  // SND
  loaddata_qsnapshot(data);
  ym2203_0.load_snapshot(data);
  loaddata_qsnapshot(data);
  ay8910_0.load_snapshot(data);
  // MEM
  loaddata_qsnapshot(@memory);
  loaddata_qsnapshot(@mem_snd);
  // MISC
  loaddata_qsnapshot(@buffer);
  fondo := buffer[0];
  soundlatch := buffer[1];
  soundlatch2 := buffer[2];
  scroll_x := buffer[3] or (buffer[4] shl 8);
  change_fonts := buffer[5] <> 0;
  loaddata_qsnapshot(@lines_color_look);
  loaddata_qsnapshot(@buffer_paleta);
  freemem(data);
  close_qsnapshot;
  // END
  for f := 0 to 639 do
    change_color(f * 2);
end;

// Main
procedure reset_citycon;
begin
  m6809_0.reset;
  m6809_1.reset;
  frame_main := m6809_0.tframes;
  frame_snd := m6809_1.tframes;
  ym2203_0.reset;
  ay8910_0.reset;
  reset_audio;
  fillchar(lines_color_look[0], $100, 0);
  marcade.in0 := $FF;
  marcade.in1 := $80;
  marcade.in2 := $FF;
  fondo := 0;
  soundlatch := 0;
  soundlatch2 := 0;
  scroll_x := 0;
  change_fonts := false;
end;

function start_cityconnection: boolean;
var
  f: word;
  memory_temp: array [0 .. $17FFF] of byte;
const
  pc_x: array [0 .. 7] of dword = (0, 1, 2, 3, 256 * 8 * 8 + 0, 256 * 8 * 8 + 1, 256 * 8 * 8 + 2, 256 * 8 * 8 + 3);
  ps_x: array [0 .. 7] of dword = (0, 1, 2, 3, 128 * 16 * 8 + 0, 128 * 16 * 8 + 1, 128 * 16 * 8 + 2, 128 * 16 * 8 + 3);
  ps_y: array [0 .. 15] of dword = (0 * 8, 1 * 8, 2 * 8, 3 * 8, 4 * 8, 5 * 8, 6 * 8, 7 * 8, 8 * 8, 9 * 8, 10 * 8, 11 * 8, 12 * 8, 13 * 8, 14 * 8, 15 * 8);
begin
  machine_calls.general_loop := citycon_loop;
  machine_calls.reset := reset_citycon;
  machine_calls.save_qsnap := citycon_qsave;
  machine_calls.load_qsnap := citycon_qload;
  machine_calls.fps_max := 59.637405;
  start_cityconnection := false;
  start_audio(false);
  screen_init(1, 1024, 256, true);
  screen_mod_scroll(1, 1024, 256, 1023, 256, 256, 255);
  screen_init(2, 1024, 256);
  screen_mod_scroll(2, 1024, 256, 1023, 256, 256, 255);
  screen_init(3, 256, 256, false, true);
  start_video(240, 224);
  // Main CPU
  m6809_0 := cpu_m6809.create(8000000, 262, TCPU_MC6809);
  m6809_0.change_ram_calls(citycon_getbyte, citycon_putbyte);
  if not(roms_load(@memoria, citycon_rom)) then
    exit;
  // Sound CPU
  m6809_1 := cpu_m6809.create(20000000 div 30, 262, TCPU_MC6809E); // deberia ser 32...
  m6809_1.change_ram_calls(scitycon_getbyte, scitycon_putbyte);
  m6809_1.init_sound(citycon_sound_update);
  if not(roms_load(@mem_snd, citycon_sonido)) then
    exit;
  // Sound Chip
  ym2203_0 := ym2203_chip.create(20000000 div 16, 0.5, 1);
  ym2203_0.change_io_calls(citycon_porta, citycon_portb, nil, nil);
  ay8910_0 := ay8910_chip.create(20000000 div 16, AY8910);
  // convertir chars
  if not(roms_load(@memory_temp, citycon_char)) then
    exit;
  init_gfx(0, 8, 8, 256);
  gfx[0].trans[0] := true;
  gfx_set_desc_data(2, 0, 8 * 8, 4, 0);
  convert_gfx(0, 0, @memory_temp, @pc_x, @ps_y, false, false);
  // tiles
  if not(roms_load(@memory_temp, citycon_tiles)) then
    exit;
  init_gfx(1, 8, 8, 3072);
  for f := 0 to $B do
  begin
    gfx_set_desc_data(4, 12, 8 * 8, 4 + ($1000 * f * 8), 0 + ($1000 * f * 8), ($C000 + ($1000 * f)) * 8 + 4, ($C000 + ($1000 * f)) * 8 + 0);
    convert_gfx(1, $100 * 8 * 8 * f, @memory_temp, @pc_x, @ps_y, false, false);
  end;
  if not(roms_load(@memory_font, citycon_fondo)) then
    exit;
  // sprites
  if not(roms_load(@memory_temp, citycon_sprites)) then
    exit;
  init_gfx(2, 8, 16, 256);
  gfx[2].trans[0] := true;
  for f := 0 to 1 do
  begin
    gfx_set_desc_data(4, 2, 16 * 8, ($1000 * f * 8) + 4, ($1000 * f * 8) + 0, ($2000 + $1000 * f) * 8 + 4, ($2000 + $1000 * f) * 8 + 0);
    convert_gfx(2, $80 * 16 * 8 * f, @memory_temp, @ps_x, @ps_y, false, false);
  end;
  // DIP
  marcade.dswa := 0;
  marcade.dswb := $80;
  marcade.dswa_val2 := @citycon_dip_a;
  marcade.dswb_val2 := @citycon_dip_b;
  // final
  reset_citycon;
  start_cityconnection := true;
end;

end.
