unit gng_hw;

interface

uses
  WinApi.Windows,
  m6809,
  nz80,
  ym_2203,
  main_engine,
  controls_engine,
  gfx_engine,
  rom_engine,
  pal_engine,
  sound_engine,
  timer_engine,
  qsnapshot;

function start_ghostsngoblins: boolean;

implementation

const
  gng_rom: array [0 .. 2] of tipo_roms = ((n: 'gg3.bin'; l: $8000; p: $8000; crc: $9E01C65E), (n: 'gg4.bin'; l: $4000; p: $4000; crc: $66606BEB), (n: 'gg5.bin'; l: $8000; p: $10000; crc: $D6397B2B));
  gng_char: tipo_roms = (n: 'gg1.bin'; l: $4000; p: 0; crc: $ECFCCF07);
  gng_tiles: array [0 .. 5] of tipo_roms = ((n: 'gg11.bin'; l: $4000; p: 0; crc: $DDD56FA9), (n: 'gg10.bin'; l: $4000; p: $4000; crc: $7302529D), (n: 'gg9.bin'; l: $4000; p: $8000; crc: $20035BDA), (n: 'gg8.bin'; l: $4000; p: $C000; crc: $F12BA271), (n: 'gg7.bin'; l: $4000;
    p: $10000; crc: $E525207D), (n: 'gg6.bin'; l: $4000; p: $14000; crc: $2D77E9B2));
  gng_sprites: array [0 .. 5] of tipo_roms = ((n: 'gg17.bin'; l: $4000; p: 0; crc: $93E50A8F), (n: 'gg16.bin'; l: $4000; p: $4000; crc: $06D7E5CA), (n: 'gg15.bin'; l: $4000; p: $8000; crc: $BC1FE02D), (n: 'gg14.bin'; l: $4000; p: $C000; crc: $6AAF12F9), (n: 'gg13.bin'; l: $4000;
    p: $10000; crc: $E80C3FCA), (n: 'gg12.bin'; l: $4000; p: $14000; crc: $7780A925));
  gng_sound: tipo_roms = (n: 'gg2.bin'; l: $8000; p: 0; crc: $615F5B6F);
  // Dip
  gng_dip_a: array [0 .. 5] of def_dip2 = ((mask: $F; name: 'Coinage'; number: 16; val16: (2, 5, 8, 4, 1, $F, 3, 7, $E, 6, $D, $C, $B, $A, 9, 0);
    name16: ('4C 1C', '3C 1C', '2C 1C', '3C 2C', '4C 3C', '1C 1C', '3C 4C', '2C 3C', '1C 2C', '2C 5C', '1C 3C', '1C 4C', '1C 5C', '1C 6C', '1C 7C', 'Free Play')), (mask: $10; name: 'Coinage affects'; number: 2; val2: ($10, 0); name2: ('Coin A', 'Coin B')), (mask: $20;
    name: 'Demo Sounds'; number: 2; val2: ($20, 0); name2: ('Off', 'On')), (mask: $40; name: 'Service Mode'; number: 2; val2: ($40, 0); name2: ('Off', 'On')), (mask: $80; name: 'Flip Screen'; number: 2; val2: ($80, 0); name2: ('Off', 'On')), ());
  gng_dip_b: array [0 .. 4] of def_dip2 = ((mask: 3; name: 'Lives'; number: 4; val4: (3, 2, 1, 0); name4: ('3', '4', '5', '7')), (mask: 4; name: 'Cabinet'; number: 2; val2: (0, 4); name2: ('Upright', 'Cocktail')), (mask: $18; name: 'Bonus Life'; number: 4; val4: ($18, $10, 8, 0);
    name4: ('20K 70K+', '30K 80K+', '20K 80K', '30K 80K')), (mask: $60; name: 'Difficulty'; number: 4; val4: ($40, $60, $20, 0); name4: ('Easy', 'Normal', 'Difficult', 'Very Difficult')), ());

var
  memory_rom: array [0 .. 4, 0 .. $1FFF] of byte;
  banco, soundlatch: byte;
  scroll_x, scroll_y: word;

procedure update_video_gng;
var
  x, y, f, color, nchar: word;
  atrib: byte;
  flip_x, flip_y: boolean;
begin
  // background y foreground
  for f := 0 to $3FF do
  begin
    atrib := memory[$2C00 + f];
    color := atrib and 7;
    if (gfx[2].buffer[f] or buffer_color[color + $10]) then
    begin
      x := (f shr 5) shl 4;
      y := (f and $1F) shl 4;
      nchar := memory[$2800 + f] + (atrib and $C0) shl 2;
      flip_x := (atrib and $10) <> 0;
      flip_y := (atrib and $20) <> 0;
      put_gfx_flip(x, y, nchar, color shl 3, 1, 2, flip_x, flip_y);
      if (atrib and 8) = 0 then
        put_gfx_block_trans(x, y, 2, 16, 16)
      else
        put_gfx_trans_flip(x, y, nchar, color shl 3, 2, 2, flip_x, flip_y);
      gfx[2].buffer[f] := false;
    end;
    // chars
    atrib := memory[$2400 + f];
    color := atrib and $F;
    if (gfx[0].buffer[f] or buffer_color[color]) then
    begin
      y := (f shr 5) shl 3;
      x := (f and $1F) shl 3;
      nchar := memory[$2000 + f] + ((atrib and $C0) shl 2);
      put_gfx_trans(x, y, nchar, (color shl 2) + $80, 3, 0);
      gfx[0].buffer[f] := false;
    end;
  end;
  // scroll del fondo
  scroll_x_y(1, 4, scroll_x, scroll_y);
  // sprites
  for f := $7F downto 0 do
  begin
    atrib := buffer_sprites[(f shl 2) + 1];
    nchar := buffer_sprites[f shl 2] + ((atrib shl 2) and $300);
    color := (atrib and $30) + 64;
    x := buffer_sprites[3 + (f shl 2)] + ((atrib and 1) shl 8);
    y := buffer_sprites[2 + (f shl 2)];
    put_gfx_sprite(nchar, color, (atrib and 4) <> 0, (atrib and 8) <> 0, 1);
    update_gfx_sprite(x, y, 4, 1);
  end;
  scroll_x_y(2, 4, scroll_x, scroll_y);
  // Actualiza buffer sprites
  copymemory(@buffer_sprites, @memory[$1E00], $200);
  // chars
  update_region(0, 0, 256, 256, 3, 0, 0, 256, 256, 4);
  update_final_piece(0, 16, 256, 224, 4);
  fillchar(buffer_color, MAX_COLOR_BUFFER, 0);
end;

procedure events_gng;
begin
  if main_vars.service1 then
    marcade.dswa := (marcade.dswa and $BF)
  else
    marcade.dswa := (marcade.dswa or $40);
  if event.arcade then
  begin
    // P1
    if p_contrls.map_arcade.right[0] then
      marcade.in1 := (marcade.in1 and $FE)
    else
      marcade.in1 := (marcade.in1 or 1);
    if p_contrls.map_arcade.left[0] then
      marcade.in1 := (marcade.in1 and $FD)
    else
      marcade.in1 := (marcade.in1 or 2);
    if p_contrls.map_arcade.down[0] then
      marcade.in1 := (marcade.in1 and $FB)
    else
      marcade.in1 := (marcade.in1 or 4);
    if p_contrls.map_arcade.up[0] then
      marcade.in1 := (marcade.in1 and $F7)
    else
      marcade.in1 := (marcade.in1 or 8);
    if p_contrls.map_arcade.but1[0] then
      marcade.in1 := (marcade.in1 and $EF)
    else
      marcade.in1 := (marcade.in1 or $10);
    if p_contrls.map_arcade.but0[0] then
      marcade.in1 := (marcade.in1 and $DF)
    else
      marcade.in1 := (marcade.in1 or $20);
    // P2
    if p_contrls.map_arcade.right[1] then
      marcade.in2 := (marcade.in2 and $FE)
    else
      marcade.in2 := (marcade.in2 or 1);
    if p_contrls.map_arcade.left[1] then
      marcade.in2 := (marcade.in2 and $FD)
    else
      marcade.in2 := (marcade.in2 or 2);
    if p_contrls.map_arcade.down[1] then
      marcade.in2 := (marcade.in2 and $FB)
    else
      marcade.in2 := (marcade.in2 or 4);
    if p_contrls.map_arcade.up[1] then
      marcade.in2 := (marcade.in2 and $F7)
    else
      marcade.in2 := (marcade.in2 or 8);

    if p_contrls.map_arcade.but1[1] then
      marcade.in2 := (marcade.in2 and $EF)
    else
      marcade.in2 := (marcade.in2 or $10);
    if p_contrls.map_arcade.but0[1] then
      marcade.in2 := (marcade.in2 and $DF)
    else
      marcade.in2 := (marcade.in2 or $20);
    // SYS
    if p_contrls.map_arcade.start[0] then
      marcade.in0 := (marcade.in0 and $FE)
    else
      marcade.in0 := (marcade.in0 or 1);
    if p_contrls.map_arcade.start[1] then
      marcade.in0 := (marcade.in0 and $FD)
    else
      marcade.in0 := (marcade.in0 or 2);
    if p_contrls.map_arcade.coin[0] then
      marcade.in0 := (marcade.in0 and $BF)
    else
      marcade.in0 := (marcade.in0 or $40);
    if p_contrls.map_arcade.coin[1] then
      marcade.in0 := (marcade.in0 and $7F)
    else
      marcade.in0 := (marcade.in0 or $80);
  end;
end;

procedure gng_loop;
var
  f: word;
begin
  init_controls(false, false, false, true);
  while EmuStatus = EsRunning do
  begin
    if EmulationPaused = false then
    begin
      for f := 0 to 261 do
      begin
        if f = 246 then
        begin
          update_video_gng;
          m6809_0.change_irq(HOLD_LINE);
        end;
        // Main CPU
        m6809_0.run(frame_main);
        frame_main := frame_main + m6809_0.tframes - m6809_0.contador;
        // Sound CPU
        z80_0.run(frame_snd);
        frame_snd := frame_snd + z80_0.tframes - z80_0.contador;
      end;
    end;
    events_gng;
    video_sync;
  end
else
  pause_action;
end;
end;

procedure change_color(pos: word);
var
  tmp_color: byte;
  color: tcolor;
begin
  tmp_color := buffer_paleta[pos];
  color.r := pal4bit(tmp_color shr 4);
  color.g := pal4bit(tmp_color);
  tmp_color := buffer_paleta[$100 + pos];
  color.b := pal4bit(tmp_color shr 4);
  set_pal_color(color, pos);
  case pos of
    0 .. $3F:
      buffer_color[(pos shr 3) + $10] := true;
    $80 .. $FF:
      buffer_color[(pos shr 2) and $F] := true;
  end;
end;

function gng_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $2FFF, $6000 .. $FFFF:
      gng_getbyte := memory[direccion];
    $3000:
      gng_getbyte := marcade.in0;
    $3001:
      gng_getbyte := marcade.in1;
    $3002:
      gng_getbyte := marcade.in2;
    $3003:
      gng_getbyte := marcade.dswa;
    $3004:
      gng_getbyte := marcade.dswb;
    $3800 .. $39FF:
      gng_getbyte := buffer_paleta[direccion and $1FF];
    $4000 .. $5FFF:
      gng_getbyte := memory_rom[banco, direccion and $1FFF];
  end;
end;

procedure gng_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $1FFF:
      memory[direccion] := valor;
    $2000 .. $27FF:
      if memory[direccion] <> valor then
      begin
        gfx[0].buffer[direccion and $3FF] := true;
        memory[direccion] := valor;
      end;
    $2800 .. $2FFF:
      if memory[direccion] <> valor then
      begin
        gfx[2].buffer[direccion and $3FF] := true;
        memory[direccion] := valor;
      end;
    $3800 .. $39FF:
      if buffer_paleta[direccion and $1FF] <> valor then
      begin
        buffer_paleta[direccion and $1FF] := valor;
        change_color(direccion and $FF);
      end;
    $3A00:
      soundlatch := valor;
    $3B08:
      scroll_x := (scroll_x and $100) or valor;
    $3B09:
      scroll_x := (scroll_x and $FF) or ((valor and 1) shl 8);
    $3B0A:
      scroll_y := (scroll_y and $100) or valor;
    $3B0B:
      scroll_y := (scroll_y and $FF) or ((valor and 1) shl 8);
    $3D00:
      main_screen.flip_main_screen := (valor and 1) = 0;
    $3E00:
      banco := valor mod 5;
    $4000 .. $FFFF:
      ; // ROM
  end;
end;

function sound_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $7FFF, $C000 .. $C7FF:
      sound_getbyte := mem_snd[direccion];
    $C800:
      sound_getbyte := soundlatch;
  end;
end;

procedure sound_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $7FFF:
      ; // ROM
    $C000 .. $C7FF:
      mem_snd[direccion] := valor;
    $E000:
      ym2203_0.Control(valor);
    $E001:
      ym2203_0.Write(valor);
    $E002:
      ym2203_1.Control(valor);
    $E003:
      ym2203_1.Write(valor);
  end;
end;

procedure gng_sound_update;
begin
  ym2203_0.update;
  ym2203_1.update;
end;

procedure gng_snd_irq;
begin
  z80_0.change_irq(HOLD_LINE);
end;

procedure gng_qsave(nombre: string);
var
  data: pbyte;
  buffer: array [0 .. 5] of byte;
  size: word;
begin
  open_qsnapshot_save('gng' + nombre);
  getmem(data, 20000);
  // CPU
  size := m6809_0.save_snapshot(data);
  savedata_qsnapshot(data, size);
  size := z80_0.save_snapshot(data);
  savedata_qsnapshot(data, size);
  // SND
  size := ym2203_0.save_snapshot(data);
  savedata_qsnapshot(data, size);
  size := ym2203_1.save_snapshot(data);
  savedata_qsnapshot(data, size);
  // MEM
  savedata_qsnapshot(@memory[0], $4000);
  savedata_qsnapshot(@mem_snd[$8000], $8000);
  // MISC
  buffer[0] := banco;
  buffer[1] := soundlatch;
  buffer[2] := scroll_x and $FF;
  buffer[3] := scroll_x shr 8;
  buffer[4] := scroll_y and $FF;
  buffer[5] := scroll_y shr 8;
  savedata_qsnapshot(@buffer[0], 6);
  savedata_qsnapshot(@buffer_sprites, $200);
  savedata_qsnapshot(@buffer_paleta, $200 * 2);
  freemem(data);
  close_qsnapshot;
end;

procedure gng_qload(nombre: string);
var
  data: pbyte;
  buffer: array [0 .. 5] of byte;
  f: byte;
begin
  if not(open_qsnapshot_load('gng' + nombre)) then
    exit;
  getmem(data, 20000);
  // CPU
  loaddata_qsnapshot(data);
  m6809_0.load_snapshot(data);
  loaddata_qsnapshot(data);
  z80_0.load_snapshot(data);
  // SND
  loaddata_qsnapshot(data);
  ym2203_0.load_snapshot(data);
  loaddata_qsnapshot(data);
  ym2203_1.load_snapshot(data);
  // MEM
  loaddata_qsnapshot(@memory[0]);
  loaddata_qsnapshot(@mem_snd[$8000]);
  // MISC
  loaddata_qsnapshot(@buffer);
  banco := buffer[0];
  soundlatch := buffer[1];
  scroll_x := buffer[2] or (buffer[3] shl 8);
  scroll_y := buffer[4] or (buffer[5] shl 8);
  loaddata_qsnapshot(@buffer_sprites);
  loaddata_qsnapshot(@buffer_paleta);
  freemem(data);
  close_qsnapshot;
  // END
  for f := 0 to $FF do
    change_color(f);
end;

// Main
procedure reset_gng;
begin
  m6809_0.reset;
  z80_0.reset;
  frame_main := m6809_0.tframes;
  frame_snd := z80_0.tframes;
  ym2203_0.reset;
  ym2203_1.reset;
  reset_audio;
  banco := 0;
  marcade.in0 := $FF;
  marcade.in1 := $FF;
  marcade.in2 := $FF;
  soundlatch := 0;
  scroll_x := 0;
  scroll_y := 0;
end;

function start_ghostsngoblins: boolean;
var
  colores: tpaleta;
  f: word;
  memory_temp: array [0 .. $1FFFF] of byte;
const
  ps_x: array [0 .. 15] of dword = (0, 1, 2, 3, 8 + 0, 8 + 1, 8 + 2, 8 + 3, 32 * 8 + 0, 32 * 8 + 1, 32 * 8 + 2, 32 * 8 + 3, 33 * 8 + 0, 33 * 8 + 1, 33 * 8 + 2, 33 * 8 + 3);
  ps_y: array [0 .. 15] of dword = (0 * 16, 1 * 16, 2 * 16, 3 * 16, 4 * 16, 5 * 16, 6 * 16, 7 * 16, 8 * 16, 9 * 16, 10 * 16, 11 * 16, 12 * 16, 13 * 16, 14 * 16, 15 * 16);
  pt_x: array [0 .. 15] of dword = (0, 1, 2, 3, 4, 5, 6, 7, 16 * 8 + 0, 16 * 8 + 1, 16 * 8 + 2, 16 * 8 + 3, 16 * 8 + 4, 16 * 8 + 5, 16 * 8 + 6, 16 * 8 + 7);
  pt_y: array [0 .. 15] of dword = (0 * 8, 1 * 8, 2 * 8, 3 * 8, 4 * 8, 5 * 8, 6 * 8, 7 * 8, 8 * 8, 9 * 8, 10 * 8, 11 * 8, 12 * 8, 13 * 8, 14 * 8, 15 * 8);
begin
  machine_calls.general_loop := gng_loop;
  machine_calls.reset := reset_gng;
  machine_calls.fps_max := 12000000 / 2 / 384 / 262;
  machine_calls.save_qsnap := gng_qsave;
  machine_calls.load_qsnap := gng_qload;
  start_ghostsngoblins := false;
  start_audio(false);
  // Background
  screen_init(1, 512, 512);
  screen_mod_scroll(1, 512, 256, 511, 512, 256, 511);
  // Foreground
  screen_init(2, 512, 512, true);
  screen_mod_scroll(2, 512, 256, 511, 512, 256, 511);
  screen_init(3, 256, 256, true);
  screen_init(4, 512, 256, false, true);
  start_video(256, 224);
  // Main CPU
  m6809_0 := cpu_m6809.Create(6000000, 262, TCPU_MC6809);
  m6809_0.change_ram_calls(gng_getbyte, gng_putbyte);
  if not(roms_load(@memory_temp, gng_rom)) then
    exit;
  copymemory(@memory[$8000], @memory_temp[$8000], $8000);
  for f := 0 to 3 do
    copymemory(@memory_rom[f, 0], @memory_temp[$10000 + (f * $2000)], $2000);
  copymemory(@memory[$6000], @memory_temp[$6000], $2000);
  copymemory(@memory_rom[4, 0], @memory_temp[$4000], $2000);
  // Sound CPU
  z80_0 := cpu_z80.Create(3000000, 262);
  z80_0.change_ram_calls(sound_getbyte, sound_putbyte);
  z80_0.init_sound(gng_sound_update);
  if not(roms_load(@mem_snd, gng_sound)) then
    exit;
  timers.init(z80_0.numero_cpu, 3000000 / (4 * 60), gng_snd_irq, nil, true);
  // Sound Chip
  ym2203_0 := ym2203_chip.Create(1500000, 0.5, 2);
  ym2203_1 := ym2203_chip.Create(1500000, 0.5, 2);
  // convertir chars
  if not(roms_load(@memory_temp, gng_char)) then
    exit;
  init_gfx(0, 8, 8, 1024);
  gfx[0].trans[3] := true;
  gfx_set_desc_data(2, 0, 16 * 8, 4, 0);
  convert_gfx(0, 0, @memory_temp, @ps_x, @ps_y, false, false);
  // sprites
  if not(roms_load(@memory_temp, gng_sprites)) then
    exit;
  init_gfx(1, 16, 16, 1024);
  gfx[1].trans[15] := true;
  gfx_set_desc_data(4, 0, 64 * 8, $C000 * 8 + 4, $C000 * 8 + 0, 4, 0);
  convert_gfx(1, 0, @memory_temp, @ps_x, @ps_y, false, false);
  // tiles
  if not(roms_load(@memory_temp, gng_tiles)) then
    exit;
  init_gfx(2, 16, 16, 1024);
  gfx[2].trans[0] := true;
  gfx[2].trans[6] := true;
  gfx_set_desc_data(3, 0, 32 * 8, $10000 * 8, $8000 * 8, 0);
  convert_gfx(2, 0, @memory_temp, @pt_x, @pt_y, false, false);
  // Poner colores aleatorios hasta que inicie la paleta
  for f := 0 to 255 do
  begin
    colores[f].r := random(256);
    colores[f].g := random(256);
    colores[f].b := random(256);
  end;
  set_pal(colores, 256);
  // Dip
  marcade.dswa := $DF;
  marcade.dswb := $7B;
  marcade.dswa_val2 := @gng_dip_a;
  marcade.dswb_val2 := @gng_dip_b;
  // final
  reset_gng;
  start_ghostsngoblins := true;
end;

end.
