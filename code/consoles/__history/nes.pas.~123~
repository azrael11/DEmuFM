unit nes;

interface

uses
  WinApi.Windows,
  main_engine,
  nes_ppu,
  controls_engine,
  System.SysUtils,
  FMX.Dialogs,
  misc_functions,
  sound_engine,
  file_engine,
  n2a03,
  m6502,
  nes_mappers;

type
  tnes_machine = record
    joy1, joy2, joy1_read, joy2_read: byte;
    sram_present, val_4016: boolean;
  end;

function start_nes: boolean;

const
  NTSC_CLOCK = 1789773;
  PAL_CLOCK = 1662607;
  NTSC_REFRESH = 60.0988;
  PAL_REFRESH = 50.0070;
  NTSC_LINES = 262;
  PAL_LINES = 312;

var
  nes_0: tnes_machine;
  nv_ram_name: string;

implementation

uses
  main,
  snapshot;

procedure events_nes;
var
  temp_r: preg_m6502;
begin
  if event.arcade then
  begin
    // Player 1
    if p_contrls.map_arcade.up[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $10)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $EF);
    if p_contrls.map_arcade.down[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $20)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $DF);
    if p_contrls.map_arcade.left[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $40)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $BF);
    if p_contrls.map_arcade.right[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $80)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $7F);
    if p_contrls.map_arcade.but1[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $1)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $FE);
    if p_contrls.map_arcade.but0[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $2)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $FD);
    if p_contrls.map_arcade.start[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $8)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $F7);
    if p_contrls.map_arcade.coin[0] then
      nes_0.joy1_read := (nes_0.joy1_read or $4)
    else
      nes_0.joy1_read := (nes_0.joy1_read and $FB);
    // Player 2
    if p_contrls.map_arcade.up[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $10)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $EF);
    if p_contrls.map_arcade.down[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $20)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $DF);
    if p_contrls.map_arcade.left[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $40)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $BF);
    if p_contrls.map_arcade.right[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $80)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $7F);
    if p_contrls.map_arcade.but1[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $1)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $FE);
    if p_contrls.map_arcade.but0[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $2)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $FD);
    if p_contrls.map_arcade.start[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $8)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $F7);
    if p_contrls.map_arcade.coin[1] then
      nes_0.joy2_read := (nes_0.joy2_read or $4)
    else
      nes_0.joy2_read := (nes_0.joy2_read and $FB);
  end;
  if event.keyboard then
  begin
    // Soft Reset
    if keyboard[KEYBOARD_f5] then
    begin
      temp_r := n2a03_0.m6502.get_internal_r;
      temp_r.p.int := true;
      temp_r.sp := temp_r.sp - 3;
      temp_r.pc := memory[$FFFC] + (memory[$FFFD] shl 8);
    end;
  end;
end;

procedure nes_loop;
var
  frame: single;
  even: boolean;
begin
  init_controls(false, true, false, true);
  frame := n2a03_0.m6502.tframes;
  even := true;
  while EmuStatus = EsRunning do
  begin
    while ppu_nes_0.linea < NTSC_LINES do
    begin
      case ppu_nes_0.linea of
        0 .. 239:
          begin // render
            // Dibujo
            // En la linea 261 carga los valores de los sprites de la linea 0 PERO NO EVALUA NADA
            // En la linea 0 desde 1 PPUT hasta 256 PPUT pinta todo, la linea y con los valores
            // cargados antes, los sprites. Segun esta pintando evalua el sprite_hit_0, apartir del 257
            // La comprobacion de los sprites termina en PPUT 256 aqui pongo el sprite_over_flow
            n2a03_0.m6502.run(128 * PPU_PIXEL_TIMING);
            frame := frame - n2a03_0.m6502.contador;
            ppu_nes_0.end_y_coarse;
            ppu_nes_0.draw_linea(ppu_nes_0.linea);
            // Consumo el resto...
            n2a03_0.m6502.run(frame);
            frame := frame + n2a03_0.m6502.tframes - n2a03_0.m6502.contador;
          end;
        240:
          begin // Post-render
            n2a03_0.m6502.run(frame);
            frame := frame + n2a03_0.m6502.tframes - n2a03_0.m6502.contador;
          end;
        241:
          begin // 241
            // Pasar 1 PPUT
            n2a03_0.m6502.run(PPU_PIXEL_TIMING);
            frame := frame - n2a03_0.m6502.contador;
            // Poner VBL
            ppu_nes_0.status := ppu_nes_0.status or $80;
            if (ppu_nes_0.control1 and $80) <> 0 then
            begin
              n2a03_0.m6502.change_nmi(PULSE_LINE);
              n2a03_0.m6502.after_ei := true;
            end;
            n2a03_0.m6502.run(frame);
            frame := frame + n2a03_0.m6502.tframes - n2a03_0.m6502.contador;
          end;
        242 .. 260:
          begin // 242..260
            n2a03_0.m6502.run(frame);
            frame := frame + n2a03_0.m6502.tframes - n2a03_0.m6502.contador;
          end;
        261:
          begin // Pre-render
            // Pasar 1 PPUT
            n2a03_0.m6502.run(PPU_PIXEL_TIMING);
            frame := frame - n2a03_0.m6502.contador;
            // Limpiar VBL, sprite 0 hit y sprite overflow
            ppu_nes_0.status := ppu_nes_0.status and $1F;
            ppu_nes_0.sprite_over_flow := false;
            // Quitar un PPT
            if even then
              frame := frame - PPU_PIXEL_TIMING;
            even := not(even);
            n2a03_0.m6502.run(frame);
            frame := frame + n2a03_0.m6502.tframes - n2a03_0.m6502.contador;
            if (ppu_nes_0.control2 and $18) <> 0 then
              ppu_nes_0.address := (ppu_nes_0.address and $41F) or (ppu_nes_0.address_temp and $7BE0);
            if (@nes_mapper_0.calls.line_ack <> nil) then
              nes_mapper_0.calls.line_ack(false);
          end;
      end;
      ppu_nes_0.linea := ppu_nes_0.linea + 1;
    end;
    ppu_nes_0.linea := 0;
    eventos_nes;
    update_region(0, 0, 256, 240, 2, 0, 0, 256, 240, PANT_TEMP);
    video_sync;
  end;
end;

function nes_getbyte(direccion: word): byte;
begin
  ppu_nes_0.open_bus := direccion shr 8;
  case direccion of
    $0 .. $1FFF:
      nes_getbyte := memory[direccion and $7FF];
    $2000 .. $3FFF:
      case (direccion and 7) of
        $2:
          begin
            nes_getbyte := ppu_nes_0.status;
            // el bit de vblank se elimina cuando se lee el registro
            ppu_nes_0.status := ppu_nes_0.status and $60;
            ppu_nes_0.dir_first := true;
            n2a03_0.m6502.change_nmi(CLEAR_LINE);
          end;
        $4:
          nes_getbyte := ppu_nes_0.sprite_ram[ppu_nes_0.sprite_ram_pos];
        $7:
          nes_getbyte := ppu_nes_0.read;
      else
        nes_getbyte := ppu_nes_0.open_bus;
      end;
    $4000 .. $4013, $4015:
      nes_getbyte := n2a03_0.read(direccion);
    $4016:
      begin
        nes_getbyte := (ppu_nes_0.open_bus and $E0) or ((nes_0.joy1_read shr nes_0.joy1) and 1);
        nes_0.joy1 := nes_0.joy1 + 1;
      end;
    $4017:
      begin
        nes_getbyte := (ppu_nes_0.open_bus and $E0) or ((nes_0.joy2_read shr nes_0.joy2) and 1);
        nes_0.joy2 := nes_0.joy2 + 1;
      end;
    $4020 .. $5FFF:
      if @nes_mapper_0.calls.read_expansion <> nil then
        nes_getbyte := nes_mapper_0.calls.read_expansion(direccion) // Expansion Area
      else
        nes_getbyte := ppu_nes_0.open_bus;
    $6000 .. $7FFF:
      nes_getbyte := nes_mapper_0.calls.read_prg_ram(direccion); // PRG-RAM
    $8000 .. $FFFF:
      if @nes_mapper_0.calls.read_rom <> nil then
        nes_getbyte := nes_mapper_0.calls.read_rom(direccion)
      else
        nes_getbyte := memory[direccion]; // PRG-ROM
  end;
end;

procedure nes_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $1FFF:
      memory[direccion and $7FF] := valor;
    $2000 .. $3FFF:
      begin
        case (direccion and 7) of
          0:
            begin
              if (((ppu_nes_0.status and $80) <> 0) and ((ppu_nes_0.control1 and $80) = 0) and ((valor and $80) <> 0)) then
              begin
                n2a03_0.m6502.change_nmi(PULSE_LINE);
                n2a03_0.m6502.after_ei := true;
              end;
              ppu_nes_0.control1 := valor;
              ppu_nes_0.sprite_size := 8 shl ((valor shr 5) and 1);
              ppu_nes_0.pos_bg := (valor shr 4) and 1;
              ppu_nes_0.pos_spt := (valor shr 3) and 1;
              ppu_nes_0.address_temp := (ppu_nes_0.address_temp and $73FF) or ((valor and $3) shl 10);
            end;
          1:
            begin
              ppu_nes_0.control2 := valor;
              // Salida de video en grises!  Noah's Ark lo usa!
              if (valor and 1) <> 0 then
                ppu_nes_0.pal_mask := $30
              else
                ppu_nes_0.pal_mask := $3F;
            end;
          3:
            ppu_nes_0.sprite_ram_pos := valor;
          4:
            begin
              // Si esta renderizando escribe $ff!!
              if ppu_nes_0.linea < 240 then
                valor := $FF;
              ppu_nes_0.sprite_ram[ppu_nes_0.sprite_ram_pos] := valor;
              ppu_nes_0.sprite_ram_pos := ppu_nes_0.sprite_ram_pos + 1;
            end;
          5:
            begin
              if ppu_nes_0.dir_first then
              begin
                ppu_nes_0.address_temp := ppu_nes_0.address_temp and $7FE0;
                ppu_nes_0.address_temp := ppu_nes_0.address_temp or ((valor and $F8) shr 3);
                ppu_nes_0.tile_x_offset := valor and $7;
              end
              else
              begin
                ppu_nes_0.address_temp := ppu_nes_0.address_temp and $C1F;
                ppu_nes_0.address_temp := ppu_nes_0.address_temp or ((valor and $F8) shl 2);
                ppu_nes_0.address_temp := ppu_nes_0.address_temp or ((valor and $7) shl 12);
              end;
              ppu_nes_0.dir_first := not(ppu_nes_0.dir_first);
            end;
          6:
            begin
              if ppu_nes_0.dir_first then
              begin
                ppu_nes_0.address_temp := ppu_nes_0.address_temp and $FF;
                ppu_nes_0.address_temp := ppu_nes_0.address_temp or ((valor and $3F) shl 8);
              end
              else
              begin
                ppu_nes_0.address_temp := ppu_nes_0.address_temp and $7F00;
                ppu_nes_0.address_temp := ppu_nes_0.address_temp or valor;
                ppu_nes_0.address := ppu_nes_0.address_temp;
                if (((ppu_nes_0.address and $1000) <> 0) and (@nes_mapper_0.calls.line_ack <> nil)) then
                  nes_mapper_0.calls.line_ack(true);
              end;
              ppu_nes_0.dir_first := not(ppu_nes_0.dir_first);
            end;
          7:
            begin
              ppu_nes_0.write(valor);
              if (((ppu_nes_0.address and $1000) <> 0) and (@nes_mapper_0.calls.line_ack <> nil)) then
                nes_mapper_0.calls.line_ack(true);
            end;
        end;
      end;
    $4000 .. $4013, $4015, $4017:
      n2a03_0.write(direccion, valor);
    $4014:
      ppu_nes_0.dma_spr(valor);
    $4016:
      begin
        if (((valor and 1) = 0) and nes_0.val_4016) then
        begin
          nes_0.joy1 := 0;
          nes_0.joy2 := 0;
        end;
        nes_0.val_4016 := (valor and 1) <> 0;
      end;
    $4020 .. $5FFF:
      if @nes_mapper_0.calls.write_expansion <> nil then
        nes_mapper_0.calls.write_expansion(direccion, valor); // Expansion Area
    $6000 .. $7FFF:
      nes_mapper_0.calls.write_prg_ram(direccion, valor); // PRG-RAM
    $8000 .. $FFFF:
      if @nes_mapper_0.calls.write_rom <> nil then
        nes_mapper_0.calls.write_rom(direccion, valor); // PRG-ROM Area
  end;
end;

// Main
procedure nes_reset;
begin
  // IMPORTANTE: Primero reset al mapper para que coloque correctamente las ROMS!!!!!
  nes_mapper_0.reset;
  reset_audio;
  n2a03_0.reset;
  ppu_nes_0.reset;
  nes_0.joy1 := 0;
  nes_0.joy2 := 0;
  nes_0.joy1_read := 0;
  nes_0.joy2_read := 0;
  nes_0.val_4016 := false;
end;

function abrir_cartucho(datos: pbyte; longitud: integer): boolean;
type
  tnes_header = packed record
    magic: array [0 .. 2] of ansichar;
    magic2, prg_rom, chr_rom, flags6, flags7, flags8, flags9, flags10: byte;
    unused1: array [0 .. 4] of byte;
  end;
var
  nes_header: tnes_header;
  ptemp: pbyte;
  f, submapper: byte;
  mapper: word;
  crc32, rom_crc32: dword;
begin
  abrir_cartucho := false;
  ptemp := datos;
  copymemory(@nes_header, ptemp, sizeof(tnes_header));
  crc32 := calc_crc(ptemp, longitud);
  inc(ptemp, sizeof(tnes_header));
  if ((nes_header.magic <> 'NES') and (nes_header.magic2 <> $1A)) then
    exit;
  // Hay trainer, lo copio a la direccion $7000
  if (nes_header.flags6 and 4) <> 0 then
  begin
    copymemory(@memory[$7000], ptemp, $200);
    nes_mapper_0.prg_ram_enable := true;
    inc(ptemp, $200);
  end;
  // Vacio las ROMs/RAM/CHR
  fillchar(nes_mapper_0.prg, sizeof(nes_mapper_0.prg), 0);
  fillchar(nes_mapper_0.chr, sizeof(nes_mapper_0.chr), 0);
  fillchar(nes_mapper_0.prg_ram, sizeof(nes_mapper_0.prg_ram), 0);
  // Pos 4 Numero de paginas de ROM de 16k 1-255
  nes_mapper_0.last_prg := nes_header.prg_rom;
  if nes_mapper_0.last_prg > 32 then
    exit;
  for f := 0 to (nes_mapper_0.last_prg - 1) do
  begin
    copymemory(@nes_mapper_0.prg[f, 0], ptemp, $4000);
    inc(ptemp, $4000);
  end;
  copymemory(@memory[$8000], @nes_mapper_0.prg[0, 0], $4000);
  if nes_mapper_0.last_prg = 1 then
    copymemory(@memory[$C000], @nes_mapper_0.prg[0, 0], $4000)
  else
    copymemory(@memory[$C000], @nes_mapper_0.prg[1, 0], $4000);
  // Pos 5 Numero de paginas de CHR de 8k 0-255
  nes_mapper_0.last_chr := nes_header.chr_rom;
  if nes_mapper_0.last_chr > 63 then
    exit;
  // chr ram es un caso diferente... tiene paginacion y dos paginas que se pueden intercambiar
  // Lo activo solo si el mapper lo necesita... Uso igual la memoria chr del MAPPER!!!
  if nes_mapper_0.last_chr = 0 then
  begin
    ppu_nes_0.write_chr := true;
    fillchar(nes_mapper_0.chr[0, 0], $2000, 0);
  end
  else
  begin
    ppu_nes_0.write_chr := false;
    if nes_mapper_0.last_chr > 64 then
      exit;
    for f := 0 to (nes_mapper_0.last_chr - 1) do
    begin
      copymemory(@nes_mapper_0.chr[f, 0], ptemp, $2000);
      inc(ptemp, $2000);
    end;
    copymemory(@ppu_nes_0.chr[0, 0], @nes_mapper_0.chr[0, 0], $1000);
    copymemory(@ppu_nes_0.chr[1, 0], @nes_mapper_0.chr[0, $1000], $1000);
  end;
  // Pos 6 bit7-4 mapper low - bit3 4 screen - bit2 trainer - bit1 battery - bit0 mirror
  // Pos 7 bit7-4 mapper high
  // Si la pos 7 tiene la marca 'XXXX10XX'--> iNes 2.0
  if (nes_header.flags7 and $C) = 8 then
  begin
    // MessageDlg('NES: Cabecera iNes 2.0',mtInformation,[mbOk], 0);
    // Falta por implementar el resto... http://wiki.nesdev.com/w/index.php/NES_2.0
    submapper := (nes_header.flags8 and $F0) shr 4;
    mapper := (nes_header.flags6 shr 4) or (nes_header.flags7 and $F0) or ((nes_header.flags8 and $F) shl 8);
  end
  else
  begin
    // Si las pos 12,13,14 y 15 <>0 --> Archaic
    if ((nes_header.unused1[1] <> 0) and (nes_header.unused1[2] <> 0) and (nes_header.unused1[3] <> 0) and (nes_header.unused1[4] <> 0)) then
    begin
      mapper := nes_header.flags6 shr 4;
    end
    else
    begin // iNes
      mapper := (nes_header.flags6 shr 4) or (nes_header.flags7 and $F0);
      if (nes_header.flags9 and 1) <> 0 then
      begin
//        MessageDlg('NES: PAL ROM Found', mtError, [mbOk], 0);
      end;
    end;
  end;
  nes_0.sram_present := false;
  if (nes_header.flags6 and 2) <> 0 then
  begin
    if read_file_size(nv_ram_name, longitud) then
      read_file(nv_ram_name, @memory[$6000], longitud);
    nes_0.sram_present := true;
  end;
  ppu_nes_0.mirror := MIRROR_VERTICAL;
  if (nes_header.flags6 and 8) <> 0 then
    ppu_nes_0.mirror := MIRROR_FOUR_SCREEN
  else if (nes_header.flags6 and 1) = 0 then
    ppu_nes_0.mirror := MIRROR_HORIZONTAL;
  // Parches!!!
  case crc32 of
    $3FC29044, $2ED79B73, $76124D08:
      submapper := 1; // MMC6
    $50F66538:
      memory[$FFFD] := $CA; // Urban chan e-games
    $7A5CC019:
      begin
        memory[$FB14] := $04;
        memory[$FB15] := $04;
      end;
    $42EDBCE2, $ACC2B74A, $D8DFD3D1:
      submapper := 1;
    $51CE0655, $761E1FC9, $57D8330A, $E1539190:
      begin
        mapper := 206;
        ppu_nes_0.mirror := MIRROR_FOUR_SCREEN;
      end;
    $D327F0A:
      mapper := 154;
    $4433BA0A:
      mapper := 87;
    $3C7B0120, $AD893BF7, $2FB7D5B9, $977F982, $D994D5FF, $F07D31B2, $E476313E, $103F0755, $63D71CDA, $A8A1C2EB, $C8E5E815, $6FDF50D0, $154A31B6:
      mapper := 206;
    $D122BA8D, $62E7AEC5, $6EE61DA3:
      mapper := 152;
  end;
  rom_crc32 := calc_crc(@nes_mapper_0.chr[0, 0], $2000);
  if ((mapper = 243) and (rom_crc32 <> $282DCB3A) and (rom_crc32 <> $331802E2)) then
    mapper := 150;
  case rom_crc32 of
    $19C5C4AA:
      if mapper = 25 then
      begin // VRC2-c
        submapper := 1;
        mapper := 23;
      end;
    $824324FA, $87C17609, $3B31F998:
      if mapper = 25 then
        submapper := 3; // VRC4-b
    $F82B8E59:
      if mapper = 21 then
        submapper := 1; // VRC4-c
    $AE17C652, $23F896A7:
      if mapper = 25 then
        submapper := 4; // VRC4-d
    $A30927DE, $7B790220, $C2CF279A, $88B512D6, $EB9FD289:
      if mapper = 23 then
      begin // VRC4-e
        submapper := 2;
        mapper := 21;
      end;
    $BD493548:
      submapper := 1; // VRC7-b
    $7FF2DC2B, $6ADD6CD6, $1557191A, $8F03A735, $E8D170D8, $CC06CF3E:
      if mapper = 33 then
        mapper := 48;
    $F47F0BCA:
      if mapper = 173 then
        mapper := 132;
    $1A145504, $19C33692:
      if mapper = 79 then
        mapper := 173;
    $479FB8E6:
      mapper := 133;
  end;
  abrir_cartucho := nes_mapper_0.set_mapper(mapper, submapper);
end;

procedure abrir_nes;
var
  extension, nombre_file, romfile: string;
  datos: pbyte;
  longitud: integer;
begin
  if not(openrom(romfile, SNES)) then
    exit;
  getmem(datos, $400000);
  if not(extract_data(romfile, datos, longitud, nombre_file, SNES)) then
  begin
    freemem(datos);
    exit;
  end;
  extension := extension_fichero(nombre_file);
  // Guardar la SRAM
  if (nes_0.sram_present and (nv_ram_name <> '')) then
    write_file(nv_ram_name, @memory[$6000], $2000);
  if @n2a03_0.additional_sound <> nil then
    n2a03_0.add_more_sound(nil);
  if extension = 'DSP' then
    snapshot_r(datos, longitud, SNES);
  if extension = 'NES' then
  begin
    if abrir_cartucho(datos, longitud) then
    begin
      if nes_0.sram_present then
        nv_ram_name := Directory.Arcade_nvram + ChangeFileExt(nombre_file, '.nv');
      nes_reset;
    end;
  end;
  freemem(datos);
//  change_caption(nombre_file);
  Directory.nes := ExtractFilePath(romfile);
end;

procedure nes_snapshot;
var
  nombre: string;
begin
  nombre := snapshot_main_write(SNES);
  Directory.nes := ExtractFilePath(nombre);
end;

procedure nes_cerrar;
begin
  if (nes_0.sram_present and (nv_ram_name <> '')) then
    write_file(nv_ram_name, @memory[$6000], $2000);
  nes_mapper_0.free;
  ppu_nes_0.free;
end;

function start_nes: boolean;
begin
  machine_calls.general_loop := nes_loop;
  machine_calls.close := nes_cerrar;
  machine_calls.reset := nes_reset;
  machine_calls.cartridges := abrir_nes;
  machine_calls.take_snapshot := nes_snapshot;
  machine_calls.fps_max := NTSC_REFRESH;
  start_audio(false);
  screen_init(1, 512, 1, true);
  screen_init(2, 256, 240);
  start_video(256, 240);
  // Main CPU
  n2a03_0 := cpu_n2a03.create(NTSC_CLOCK, NTSC_LINES);
  n2a03_0.m6502.change_ram_calls(nes_getbyte, nes_putbyte);
  n2a03_0.change_internals(nes_getbyte);
  ppu_nes_0 := nesppu_chip.create;
  nes_mapper_0 := tnes_mapper.create;
  if main_vars.console_init then
    abrir_nes;
  start_nes := true;
end;

end.
