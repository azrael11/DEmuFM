unit sms;

interface

uses
  nz80,
  WinApi.Windows,
  main_engine,
  controls_engine,
  sega_vdp,
  sn_76496, System.SysUtils,
  rom_engine,
  misc_functions,
  sound_engine,
  FMX.Forms,
  ym_2413;

function start_sms: boolean;
procedure change_sms_model(model: byte; load_bios: boolean = true);

type
  tmapper_sms = record
    rom: array [0 .. 63, 0 .. $3FFF] of byte;
    ram: array [0 .. $1FFF] of byte;
    bios: array [0 .. $F, 0 .. $3FFF] of byte;
    rom_bank, bios_bank: array [0 .. 3] of byte;
    ram_slot2: array [0 .. 1, 0 .. $3FFF] of byte;
    slot2_bank: byte;
    slot2_ram: boolean;
    max, max_bios: byte;
  end;

  tmastersystem = record
    mapper: tmapper_sms;
    model, old_3f: byte;
    push_pause, cart_enabled, io_enabled, bios_enabled: boolean;
    io: array [0 .. 6] of byte;
    keys: array [0 .. 1] of byte;
    old_f2: byte;
  end;

var
  sms_0: tmastersystem;

const
  CLOCK_NTSC = 3579545;
  CLOCK_PAL = 3546895;
  FPS_NTSC = 59.922743;
  FPS_PAL = 49.701460;
  sms_bios: tipo_roms = (n: 'mpr-12808.ic2'; l: $2000; p: 0; crc: $0072ED54);
  sms_bios_j: tipo_roms = (n: 'mpr-11124.ic2'; l: $2000; p: 0; crc: $48D44A13);

implementation

uses
  Main,
  config_sms,
  snapshot;

procedure eventos_sms;
begin
  if event.arcade then
  begin
    // P1
    if p_contrls.map_arcade.up[0] then
      sms_0.keys[0] := (sms_0.keys[0] and $FE)
    else
      sms_0.keys[0] := (sms_0.keys[0] or 1);
    if p_contrls.map_arcade.down[0] then
      sms_0.keys[0] := (sms_0.keys[0] and $FD)
    else
      sms_0.keys[0] := (sms_0.keys[0] or 2);
    if p_contrls.map_arcade.left[0] then
      sms_0.keys[0] := (sms_0.keys[0] and $FB)
    else
      sms_0.keys[0] := (sms_0.keys[0] or 4);
    if p_contrls.map_arcade.right[0] then
      sms_0.keys[0] := (sms_0.keys[0] and $F7)
    else
      sms_0.keys[0] := (sms_0.keys[0] or 8);
    if p_contrls.map_arcade.but0[0] then
      sms_0.keys[0] := (sms_0.keys[0] and $EF)
    else
      sms_0.keys[0] := (sms_0.keys[0] or $10);
    if p_contrls.map_arcade.but1[0] then
      sms_0.keys[0] := (sms_0.keys[0] and $DF)
    else
      sms_0.keys[0] := (sms_0.keys[0] or $20);
    // P2
    if p_contrls.map_arcade.up[1] then
      sms_0.keys[0] := (sms_0.keys[0] and $BF)
    else
      sms_0.keys[0] := (sms_0.keys[0] or $40);
    if p_contrls.map_arcade.down[1] then
      sms_0.keys[0] := (sms_0.keys[0] and $7F)
    else
      sms_0.keys[0] := (sms_0.keys[0] or $80);
    if p_contrls.map_arcade.left[1] then
      sms_0.keys[1] := (sms_0.keys[1] and $FE)
    else
      sms_0.keys[1] := (sms_0.keys[1] or 1);
    if p_contrls.map_arcade.right[1] then
      sms_0.keys[1] := (sms_0.keys[1] and $FD)
    else
      sms_0.keys[1] := (sms_0.keys[1] or 2);
    if p_contrls.map_arcade.but0[1] then
      sms_0.keys[1] := (sms_0.keys[1] and $FB)
    else
      sms_0.keys[1] := (sms_0.keys[1] or 4);
    if p_contrls.map_arcade.but1[1] then
      sms_0.keys[1] := (sms_0.keys[1] and $F7)
    else
      sms_0.keys[1] := (sms_0.keys[1] or 8);
    if p_contrls.map_arcade.coin[0] then
      sms_0.push_pause := true
    else if sms_0.push_pause then
    begin
      z80_0.change_nmi(PULSE_LINE);
      sms_0.push_pause := false;
    end;
  end;
end;

procedure sms_loop;
var
  frame: single;
  f: word;
begin
  init_controls(false, false, false, true);
  frame := z80_0.tframes;
  while EmuStatus = EsRunning do
  begin
    for f := 0 to (vdp_0.VIDEO_Y_TOTAL - 1) do
    begin
      z80_0.run(frame);
      frame := frame + z80_0.tframes - z80_0.contador;
      vdp_0.refresh(f);
    end;
    update_region(0, vdp_0.BORDER_DIFF, 284, 243, 1, 0, 0, 284, 243, PANT_TEMP);
    eventos_sms;
    video_sync;
  end;
end;

function sms_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $3FFF:
      if sms_0.bios_enabled then
      begin
        if direccion < $400 then
          sms_getbyte := sms_0.mapper.bios[0, direccion]
        else
          sms_getbyte := sms_0.mapper.bios[sms_0.mapper.bios_bank[0], direccion]
      end
      else if sms_0.cart_enabled then
      begin
        if direccion < $400 then
          sms_getbyte := sms_0.mapper.rom[0, direccion]
        else
          sms_getbyte := sms_0.mapper.rom[sms_0.mapper.rom_bank[0], direccion];
      end;
    $4000 .. $7FFF:
      if sms_0.bios_enabled then
        sms_getbyte := sms_0.mapper.bios[sms_0.mapper.bios_bank[1], direccion and $3FFF]
      else
        sms_getbyte := sms_0.mapper.rom[sms_0.mapper.rom_bank[1], direccion and $3FFF];
    $8000 .. $BFFF:
      if sms_0.bios_enabled then
        sms_getbyte := sms_0.mapper.bios[sms_0.mapper.bios_bank[2], direccion and $3FFF]
      else if sms_0.mapper.slot2_ram then
        sms_getbyte := sms_0.mapper.ram_slot2[sms_0.mapper.slot2_bank, direccion and $3FFF]
      else
        sms_getbyte := sms_0.mapper.rom[sms_0.mapper.rom_bank[2], direccion and $3FFF];
    $C000 .. $FFFF:
      sms_getbyte := sms_0.mapper.ram[direccion and $1FFF];
  end;
end;

procedure sms_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $7FFF:
      ;
    $8000 .. $BFFF:
      if sms_0.mapper.slot2_ram then
        sms_0.mapper.ram_slot2[sms_0.mapper.slot2_bank, direccion and $3FFF] := valor;
    $C000 .. $FFFB:
      sms_0.mapper.ram[direccion and $1FFF] := valor;
    $FFFC .. $FFFF:
      begin
        sms_0.mapper.ram[direccion and $1FFF] := valor;
        case (direccion and $3) of
          0:
            begin
              if sms_0.cart_enabled then
              begin
                sms_0.mapper.slot2_ram := (valor and 8) <> 0;
                sms_0.mapper.slot2_bank := (valor and 4) shr 2;
              end;
              // if (valor and $3<>0) then MessageDlg('Escribe $fffc '+inttohex(valor,2), mtInformation,[mbOk], 0);
            end;
          1:
            begin
              if sms_0.cart_enabled then
                sms_0.mapper.rom_bank[0] := valor mod sms_0.mapper.max;
              if sms_0.bios_enabled then
                sms_0.mapper.bios_bank[0] := valor mod sms_0.mapper.max_bios;
            end;
          2:
            begin
              if sms_0.cart_enabled then
                sms_0.mapper.rom_bank[1] := valor mod sms_0.mapper.max;
              if sms_0.bios_enabled then
                sms_0.mapper.bios_bank[1] := valor mod sms_0.mapper.max_bios;
            end;
          3:
            begin
              if sms_0.cart_enabled then
                sms_0.mapper.rom_bank[2] := valor mod sms_0.mapper.max;
              if sms_0.bios_enabled then
                sms_0.mapper.bios_bank[2] := valor mod sms_0.mapper.max_bios;
            end;
        end;
      end;
  end;
end;

function sms_getbyte_no_sega(direccion: word): byte;
begin
  case direccion of
    0 .. $3FFF:
      sms_getbyte_no_sega := sms_0.mapper.rom[sms_0.mapper.rom_bank[0], direccion];
    $4000 .. $7FFF:
      sms_getbyte_no_sega := sms_0.mapper.rom[sms_0.mapper.rom_bank[1], direccion and $3FFF];
    $8000 .. $BFFF:
      sms_getbyte_no_sega := sms_0.mapper.rom[sms_0.mapper.rom_bank[2], direccion and $3FFF];
    $C000 .. $FFFF:
      sms_getbyte_no_sega := sms_0.mapper.ram[direccion and $1FFF];
  end;
end;

procedure sms_putbyte_4_pack(direccion: word; valor: byte);
begin
  case direccion of
    $3FFE:
      begin // slot 0
        sms_0.mapper.rom_bank[0] := valor mod sms_0.mapper.max;
        sms_0.mapper.rom_bank[2] := ((valor and $30) + sms_0.mapper.rom_bank[2]) mod sms_0.mapper.max;
      end;
    $7FFF:
      sms_0.mapper.rom_bank[1] := valor mod sms_0.mapper.max; // slot 1
    $BFFF:
      sms_0.mapper.rom_bank[2] := ((sms_0.mapper.rom_bank[0] and $30) + valor) mod sms_0.mapper.max; // slot 2
    $C000 .. $FFFF:
      sms_0.mapper.ram[direccion and $1FFF] := valor;
    // else MessageDlg('Escribe ROM '+inttohex(direccion,4), mtInformation,[mbOk], 0);
  end;
end;

procedure sms_putbyte_korean(direccion: word; valor: byte);
begin
  case direccion of
    $4000:
      sms_0.mapper.rom_bank[1] := valor mod sms_0.mapper.max; // mapper slot 1
    $A000:
      sms_0.mapper.rom_bank[2] := valor mod sms_0.mapper.max; // mapper slot 2
    $C000 .. $FFFF:
      sms_0.mapper.ram[direccion and $1FFF] := valor;
    // else MessageDlg('Escribe ROM '+inttohex(direccion), mtInformation,[mbOk], 0);
  end;
end;

procedure sms_putbyte_codemasters(direccion: word; valor: byte);
begin
  case direccion of
    0:
      sms_0.mapper.rom_bank[0] := valor mod sms_0.mapper.max; // mapper slot 0
    $4000:
      sms_0.mapper.rom_bank[1] := valor mod sms_0.mapper.max; // mapper slot 1
    $8000:
      sms_0.mapper.rom_bank[2] := valor mod sms_0.mapper.max; // mapper slot 2
    $C000 .. $FFFF:
      sms_0.mapper.ram[direccion and $1FFF] := valor;
  end;
end;

function sms_getbyte_cyborgz(direccion: word): byte;
begin
  case direccion of
    0 .. $3FFF:
      sms_getbyte_cyborgz := sms_0.mapper.rom[0, direccion];
    $4000 .. $5FFF:
      sms_getbyte_cyborgz := sms_0.mapper.rom[sms_0.mapper.rom_bank[0] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[0] and 1)];
    $6000 .. $7FFF:
      sms_getbyte_cyborgz := sms_0.mapper.rom[sms_0.mapper.rom_bank[1] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[1] and 1)];
    $8000 .. $9FFF:
      sms_getbyte_cyborgz := sms_0.mapper.rom[sms_0.mapper.rom_bank[2] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[2] and 1)];
    $A000 .. $BFFF:
      sms_getbyte_cyborgz := sms_0.mapper.rom[sms_0.mapper.rom_bank[3] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[3] and 1)];
    $C000 .. $FFFF:
      sms_getbyte_cyborgz := sms_0.mapper.ram[direccion and $1FFF];
  end;
end;

procedure sms_putbyte_cyborgz(direccion: word; valor: byte);
begin
  case direccion of
    0:
      sms_0.mapper.rom_bank[2] := valor mod (sms_0.mapper.max shl 1); // mapper slot 4
    1:
      sms_0.mapper.rom_bank[3] := valor mod (sms_0.mapper.max shl 1); // mapper slot 5
    2:
      sms_0.mapper.rom_bank[0] := valor mod (sms_0.mapper.max shl 1); // mapper slot 2
    3:
      sms_0.mapper.rom_bank[1] := valor mod (sms_0.mapper.max shl 1); // mapper slot 3
    $C000 .. $FFFF:
      sms_0.mapper.ram[direccion and $1FFF] := valor;
  end;
end;

function sms_getbyte_nemesis(direccion: word): byte;
begin
  case direccion of
    0 .. $1FFF:
      sms_getbyte_nemesis := sms_0.mapper.rom[sms_0.mapper.max - 1, direccion + $2000];
    $2000 .. $3FFF:
      sms_getbyte_nemesis := sms_0.mapper.rom[0, (direccion and $1FFF) + $2000];
    $4000 .. $5FFF:
      sms_getbyte_nemesis := sms_0.mapper.rom[sms_0.mapper.rom_bank[0] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[0] and 1)];
    $6000 .. $7FFF:
      sms_getbyte_nemesis := sms_0.mapper.rom[sms_0.mapper.rom_bank[1] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[1] and 1)];
    $8000 .. $9FFF:
      sms_getbyte_nemesis := sms_0.mapper.rom[sms_0.mapper.rom_bank[2] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[2] and 1)];
    $A000 .. $BFFF:
      sms_getbyte_nemesis := sms_0.mapper.rom[sms_0.mapper.rom_bank[3] shr 1, (direccion and $1FFF) + $2000 * (sms_0.mapper.rom_bank[3] and 1)];
    $C000 .. $FFFF:
      sms_getbyte_nemesis := sms_0.mapper.ram[direccion and $1FFF];
  end;
end;

function sms_inbyte(puerto: word): byte;
begin
  sms_inbyte := $FF;
  case (puerto and $FF) of
    0 .. $3F:
      ; // return the last byte of the instruction
    $40 .. $7F:
      if (puerto and 1) <> 0 then
        sms_inbyte := vdp_0.hpos
      else
        sms_inbyte := vdp_0.linea_back;
    $80 .. $BF:
      if (puerto and $01) <> 0 then
        sms_inbyte := vdp_0.register_r
      else
        sms_inbyte := vdp_0.vram_r;
    $C0 .. $FF:
      if sms_0.io_enabled then
      begin
        if (puerto and 1) <> 0 then
          sms_inbyte := sms_0.keys[1]
        else
          sms_inbyte := sms_0.keys[0];
      end
      else
      begin
        if (puerto and $FF) = $F2 then
          sms_inbyte := sms_0.old_f2;
      end;
  end;
end;

procedure sms_outbyte(puerto: word; valor: byte);
  procedure config_io(valor: byte);
  begin
    // Bit 2 y 0 son para ver si la consola es internacional.
    // Si es JAP, devuelve lo contrario de los bits 7 y 5 (no tiene TH)
    if (valor and $5) = $5 then
    begin // bit 2 internacional
      sms_0.keys[1] := sms_0.keys[1] and $7F;
      // Si es JAP, devuelve lo contrario (no tiene TH)
      if sms_0.model = 1 then
        sms_0.keys[1] := sms_0.keys[1] or (not(valor) and $80)
      else
        sms_0.keys[1] := sms_0.keys[1] or (valor and $80);
    end;
    if (valor and $5) = $5 then
    begin // bit 1 internacional
      sms_0.keys[1] := sms_0.keys[1] and $BF;
      if sms_0.model = 1 then
        sms_0.keys[1] := sms_0.keys[1] or ((not(valor) and $20) shl 1)
      else
        sms_0.keys[1] := sms_0.keys[1] or ((valor and $20) shl 1)
    end;
    if (((sms_0.old_3f and 2) = 0) and ((valor and 2) <> 0)) then
      vdp_0.hpos := vdp_0.hpos_temp;
    if (((sms_0.old_3f and 8) = 0) and ((valor and 8) <> 0)) then
      vdp_0.hpos := vdp_0.hpos_temp;
    sms_0.old_3f := valor;
  end;

begin
  case (puerto and $FF) of
    0 .. $3F:
      if (puerto and $1) <> 0 then
        config_io(valor)
      else
      begin
        sms_0.bios_enabled := (valor and 8) = 0;
        sms_0.io_enabled := (valor and 4) = 0;
        sms_0.cart_enabled := (valor and $E0) <> $E0;
      end;
    $40 .. $7F:
      sn_76496_0.Write(valor);
    $80 .. $BF:
      if (puerto and $1) <> 0 then
        vdp_0.register_w(valor)
      else
        vdp_0.vram_w(valor);
    $C0 .. $FF:
      case (puerto and $FF) of
        $F0:
          ym2413_0.address(valor);
        $F1:
          ym2413_0.Write(valor);
        $F2:
          sms_0.old_f2 := valor;
      end;
  end;
end;

procedure sms_interrupt(int: boolean);
begin
  if int then
    z80_0.change_irq(ASSERT_LINE)
  else
    z80_0.change_irq(CLEAR_LINE);
end;

procedure sms_sound_update;
begin
  sn_76496_0.update;
  ym2413_0.update;
end;

procedure sms_set_hpos(estados: word);
begin
  vdp_0.set_hpos(z80_0.contador);
end;

function read_memory(direccion: word): byte;
begin
  read_memory := vdp_0.tms.mem[direccion];
end;

procedure write_memory(direccion: word; valor: byte);
begin
  vdp_0.tms.mem[direccion] := valor;
end;

// Main
procedure reset_sms;
begin
  z80_0.reset;
  sn_76496_0.reset;
  vdp_0.reset;
  ym2413_0.reset;
  reset_audio;
  sms_0.keys[0] := $FF;
  sms_0.keys[1] := $FF;
  sms_0.mapper.slot2_ram := false;
  sms_0.bios_enabled := true;
  sms_0.io_enabled := true;
  sms_0.cart_enabled := false;
  sms_0.mapper.rom_bank[0] := 0;
  if sms_0.mapper.max > 1 then
  begin
    // Importante! Muchos mappers confian en esto...
    sms_0.mapper.rom_bank[1] := 1;
    sms_0.mapper.rom_bank[2] := 2;
  end
  else
  begin
    sms_0.mapper.rom_bank[1] := 0;
    sms_0.mapper.rom_bank[2] := 0;
  end;
  sms_0.mapper.rom_bank[3] := 0;
  sms_0.mapper.bios_bank[0] := 0;
  if sms_0.mapper.max_bios > 1 then
  begin
    // Alex Kid confia en esto!
    sms_0.mapper.bios_bank[1] := 1;
    sms_0.mapper.bios_bank[2] := 2;
  end
  else
  begin
    sms_0.mapper.bios_bank[1] := 0;
    sms_0.mapper.bios_bank[2] := 0;
  end;
  sms_0.mapper.bios_bank[3] := 0;
  sms_0.mapper.slot2_bank := 0;
  sms_0.push_pause := false;
  // Alibaba confia en este inicio de la RAM!!!
  fillchar(sms_0.mapper.ram[0], $2000, $F0);
end;

procedure change_sms_model(model: byte; load_bios: boolean = true);
begin
  case model of
    0:
      begin
        if load_bios then
        begin
          fillchar(sms_0.mapper.bios[0], sizeof(sms_0.mapper.bios), 0);
          roms_load(@sms_0.mapper.bios[0], sms_bios);
        end;
        machine_calls.fps_max := FPS_PAL;
        z80_0.clock := CLOCK_PAL;
        z80_0.tframes := (CLOCK_PAL / LINES_PAL) / FPS_PAL;
        change_video_clock(FPS_PAL);
        // change_video_size(284,294);
        vdp_0.video_pal(vdp_0.video_mode);
        sound_engine_change_clock(CLOCK_PAL);
        sn_76496_0.change_clock(CLOCK_PAL);
      end;
    1, 2:
      begin
        if load_bios then
        begin
          fillchar(sms_0.mapper.bios[0], sizeof(sms_0.mapper.bios), 0);
          if model = 1 then
            roms_load(@sms_0.mapper.bios[0], sms_bios_j)
          else
            roms_load(@sms_0.mapper.bios[0], sms_bios);
        end;
        machine_calls.fps_max := FPS_NTSC;
        z80_0.clock := CLOCK_NTSC;
        z80_0.tframes := (CLOCK_NTSC / LINES_NTSC) / FPS_NTSC;
        change_video_clock(FPS_NTSC);
        // change_video_size(284,243);
        vdp_0.video_ntsc(vdp_0.video_mode);
        sound_engine_change_clock(CLOCK_NTSC);
        sn_76496_0.change_clock(CLOCK_NTSC);
      end;
  end;
end;

procedure sms_configurar;
begin
//  SMSConfig.Show;
//  while SMSConfig.Showing do
//    application.ProcessMessages;
end;

procedure abrir_sms;
  function abrir_cartucho_sms(data: pbyte; long: dword): boolean;
  var
    ptemp: pbyte;
    f: byte;
  begin
    fillchar(sms_0.mapper.rom[0], sizeof(sms_0.mapper.rom), 0);
    if long < $4000 then
    begin
      copymemory(@sms_0.mapper.rom[0, 0], data, long);
      sms_0.mapper.max := 1;
    end
    else
    begin
      ptemp := data;
      if (long mod $4000) <> 0 then
        inc(ptemp, long mod $4000);
      sms_0.mapper.max := long div $4000;
      if (long div $4000) > 64 then
      begin
        sms_0.mapper.max := 1;
        abrir_cartucho_sms := false;
        exit;
      end
      else
        sms_0.mapper.max := long div $4000;
      for f := 0 to (sms_0.mapper.max - 1) do
      begin
        copymemory(@sms_0.mapper.rom[f, 0], ptemp, $4000);
        inc(ptemp, $4000);
      end;
    end;
    abrir_cartucho_sms := true;
    reset_sms;
  end;

  function abrir_cartucho_sms_bios(data: pbyte; long: dword): boolean;
  var
    ptemp: pbyte;
    f: byte;
  begin
    fillchar(sms_0.mapper.bios[0], sizeof(sms_0.mapper.bios), 0);
    fillchar(sms_0.mapper.rom[0], sizeof(sms_0.mapper.rom), 0);
    ptemp := data;
    sms_0.mapper.max_bios := long div $4000;
    if sms_0.mapper.max_bios > 16 then
    begin
      sms_0.mapper.max_bios := 1;
      abrir_cartucho_sms_bios := false;
      exit;
    end;
    for f := 0 to (sms_0.mapper.max_bios - 1) do
    begin
      copymemory(@sms_0.mapper.bios[f, 0], ptemp, $4000);
      inc(ptemp, $4000);
    end;
    abrir_cartucho_sms_bios := true;
    reset_sms;
  end;

var
  extension, nombre_file, romfile: string;
  datos: pbyte;
  longitud: integer;
  crc_val: dword;
begin
  if not(openrom(romfile, SSMS)) then
    exit;
  getmem(datos, $400000);
  if not(extract_data(romfile, datos, longitud, nombre_file, SSMS)) then
  begin
    freemem(datos);
    exit;
  end;
  extension := extension_fichero(nombre_file);
  z80_0.change_ram_calls(sms_getbyte, sms_putbyte);
  crc_val := calc_crc(datos, longitud);
  case crc_val of
    $58FA27C6, $A577CE46, $29822980, $EA5C3A6F, $8813514B, $B9664AE1:
      begin // Codemasters
        z80_0.change_ram_calls(sms_getbyte_no_sega, sms_putbyte_codemasters);
      end;
    $565C799F, $DBBF4DD1, $18FB98A3, $97D03541, $89B79E77, $60D6A7C:
      begin // Korean
        z80_0.change_ram_calls(sms_getbyte_no_sega, sms_putbyte_korean);
      end;
    $A67F2A5C:
      begin // 4pack
        z80_0.change_ram_calls(sms_getbyte_no_sega, sms_putbyte_4_pack);
      end;
    $0A77FA5E, $A05258F5, $9195C34C, $83F0EEDE, $5AC99FC4, $445525E2, $F89AF3CC, $77EFE84A, $6965ED9:
      begin // Cyborg-Z, Knightmare II, Penguin, Street Master
        z80_0.change_ram_calls(sms_getbyte_cyborgz, sms_putbyte_cyborgz);
      end;
    $E316C06D:
      begin // Nemesis
        z80_0.change_ram_calls(sms_getbyte_nemesis, sms_putbyte_cyborgz);
      end;
  end;
  if ((extension = 'ROM') or (extension = 'SMS')) then
  begin
    case crc_val of
      $81C3476B, $CF4A09EA, $9C5BAD91, $8EDF7AC6, $91E93385, $E79BB689:
        abrir_cartucho_sms_bios(datos, longitud);
    else
      abrir_cartucho_sms(datos, longitud);
    end;
  end;
  if extension = 'DSP' then
    snapshot_r(datos, longitud, SSMS);
  freemem(datos);
//  change_caption(nombre_file);
  Directory.sms := ExtractFilePath(romfile);
end;

procedure sms_grabar_snapshot;
var
  nombre: string;
begin
  nombre := snapshot_main_write(SSMS);
  Directory.sms := ExtractFilePath(nombre);
end;

function start_sms: boolean;
begin
  start_sms := false;
  machine_calls.general_loop := sms_principal;
  llamadas_maquina.reset := reset_sms;
  llamadas_maquina.cartuchos := abrir_sms;
  llamadas_maquina.grabar_snapshot := sms_grabar_snapshot;
  llamadas_maquina.configurar := sms_configurar;
  if sms_0.model = 0 then
    llamadas_maquina.fps_max := FPS_PAL
  else
    llamadas_maquina.fps_max := FPS_NTSC;
  iniciar_audio(false);
  screen_init(1, 284, 294);
  iniciar_video(284, 243);
  if sms_0.model = 0 then
  begin
    // iniciar_video(284,294);
    z80_0 := cpu_z80.create(CLOCK_PAL, LINES_PAL);
    z80_0.init_sound(sms_sound_update);
    sn_76496_0 := sn76496_chip.create(CLOCK_PAL);
  end
  else
  begin
    // iniciar_video(284,243);
    z80_0 := cpu_z80.create(CLOCK_NTSC, LINES_NTSC);
    z80_0.init_sound(sms_sound_update);
    sn_76496_0 := sn76496_chip.create(CLOCK_NTSC);
  end;
  // Main CPU
  z80_0.change_ram_calls(sms_getbyte, sms_putbyte);
  z80_0.change_io_calls(sms_inbyte, sms_outbyte);
  z80_0.change_misc_calls(sms_set_hpos);
  ym2413_0 := ym2413_chip.create(10738635 div 3);
  // VDP
  vdp_0 := vdp_chip.create(1, sms_interrupt, z80_0.numero_cpu, read_memory, write_memory);
  vdp_0.set_gg(false);
  // Importante!!!
  sms_0.mapper.max := 1;
  sms_0.mapper.max_bios := 1;
  // Bios
  change_sms_model(sms_0.model, true);
  reset_sms;
  if main_vars.console_init then
    abrir_sms;
  iniciar_sms := true;
end;

end.
