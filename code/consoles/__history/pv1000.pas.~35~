unit pv1000;

interface

uses
  WinApi.Windows,
  nz80,
  main_engine,
  controls_engine,
  sysutils,
  gfx_engine,
  timer_engine,
  sound_engine,
  pal_engine,
  misc_functions,
  FMX.Dialogs;

function start_pv1000: boolean;

type
  sound_voice = record
    count: dword;
    period: word;
    val: byte;
  end;

  tpv1000_sound = record
    voice: array [0 .. 2] of sound_voice;
    control: byte;
    timer: byte;
    output_: smallint;
    tsample_: byte;
  end;

  tpv1000 = record
    io_ram: array [0 .. 7] of byte;
    force_pattern, fd_buffer_flag: boolean;
    pcg_bank, fd_data, border_col: byte;
    sound: tpv1000_sound;
    buffer_video: array [0 .. $3FF] of boolean;
    keys: array [0 .. 3] of byte;
  end;

var
  pv1000_0: tpv1000;

implementation

uses
  main,
  snapshot;

const
  pv1000_paleta: array [0 .. 7] of integer = ($000000, $0000FF, $00FF00, $00FFFF, $FF0000, $FF00FF, $FFFF00, $FFFFFF);

procedure events_pv1000;
begin
  if event.arcade then
  begin
    // System
    if p_contrls.map_arcade.coin[0] then
      pv1000_0.keys[0] := (pv1000_0.keys[0] or 1)
    else
      pv1000_0.keys[0] := (pv1000_0.keys[0] and $FE);
    if p_contrls.map_arcade.start[0] then
      pv1000_0.keys[0] := (pv1000_0.keys[0] or 2)
    else
      pv1000_0.keys[0] := (pv1000_0.keys[0] and $FD);
    if p_contrls.map_arcade.coin[1] then
      pv1000_0.keys[0] := (pv1000_0.keys[0] or 4)
    else
      pv1000_0.keys[0] := (pv1000_0.keys[0] and $FB);
    if p_contrls.map_arcade.start[1] then
      pv1000_0.keys[0] := (pv1000_0.keys[0] or 8)
    else
      pv1000_0.keys[0] := (pv1000_0.keys[0] and $F7);
    // Players
    if p_contrls.map_arcade.down[0] then
      pv1000_0.keys[1] := (pv1000_0.keys[1] or 1)
    else
      pv1000_0.keys[1] := (pv1000_0.keys[1] and $FE);
    if p_contrls.map_arcade.right[0] then
      pv1000_0.keys[1] := (pv1000_0.keys[1] or 2)
    else
      pv1000_0.keys[1] := (pv1000_0.keys[1] and $FD);
    if p_contrls.map_arcade.down[1] then
      pv1000_0.keys[1] := (pv1000_0.keys[1] or 4)
    else
      pv1000_0.keys[1] := (pv1000_0.keys[1] and $FB);
    if p_contrls.map_arcade.right[1] then
      pv1000_0.keys[1] := (pv1000_0.keys[1] or 8)
    else
      pv1000_0.keys[1] := (pv1000_0.keys[1] and $F7);
    // Players
    if p_contrls.map_arcade.left[0] then
      pv1000_0.keys[2] := (pv1000_0.keys[2] or 1)
    else
      pv1000_0.keys[2] := (pv1000_0.keys[2] and $FE);
    if p_contrls.map_arcade.up[0] then
      pv1000_0.keys[2] := (pv1000_0.keys[2] or 2)
    else
      pv1000_0.keys[2] := (pv1000_0.keys[2] and $FD);
    if p_contrls.map_arcade.left[1] then
      pv1000_0.keys[2] := (pv1000_0.keys[2] or 4)
    else
      pv1000_0.keys[2] := (pv1000_0.keys[2] and $FB);
    if p_contrls.map_arcade.up[1] then
      pv1000_0.keys[2] := (pv1000_0.keys[2] or 8)
    else
      pv1000_0.keys[2] := (pv1000_0.keys[2] and $F7);
    // Players
    if p_contrls.map_arcade.but0[0] then
      pv1000_0.keys[3] := (pv1000_0.keys[3] or 1)
    else
      pv1000_0.keys[3] := (pv1000_0.keys[3] and $FE);
    if p_contrls.map_arcade.but1[0] then
      pv1000_0.keys[3] := (pv1000_0.keys[3] or 2)
    else
      pv1000_0.keys[3] := (pv1000_0.keys[3] and $FD);
    if p_contrls.map_arcade.but0[1] then
      pv1000_0.keys[3] := (pv1000_0.keys[3] or 4)
    else
      pv1000_0.keys[3] := (pv1000_0.keys[3] and $FB);
    if p_contrls.map_arcade.but1[1] then
      pv1000_0.keys[3] := (pv1000_0.keys[3] or 8)
    else
      pv1000_0.keys[3] := (pv1000_0.keys[3] and $F7);
  end;
end;

procedure update_video_pv1000;
var
  sx, sy: byte;
  addr, tile, pos: word;
  procedure draw_tile(pos: word);
  var
    x, y, valor1, valor2, valor3: byte;
    ptemp: pword;
  begin
    for y := 0 to 7 do
    begin
      ptemp := punbuf;
      valor3 := memory[pos + y];
      valor2 := memory[pos + 8 + y];
      valor1 := memory[pos + 16 + y];
      for x := 7 downto 0 do
      begin
        ptemp^ := paleta[((valor1 shr x) and 1) or (((valor2 shr x) and 1) * 2) or (((valor3 shr x) and 1) * 4)];
        inc(ptemp);
      end;
      putpixel(sx * 8, (sy * 8) + y, 8, punbuf, 1);
    end;
  end;

begin
  for sy := 0 to 23 do
  begin
    for sx := 2 to 29 do
    begin
      addr := (sy * 32) + sx;
      if pv1000_0.buffer_video[addr] then
      begin
        tile := memory[$B800 + addr];
        if ((tile < $E0) or pv1000_0.force_pattern) then
        begin
          tile := tile or (pv1000_0.pcg_bank shl 8);
          pos := (tile * 32) + 8;
          draw_tile(pos);
        end
        else
        begin
          tile := tile - $E0;
          pos := $BC00 + (tile * 32) + 8;
          draw_tile(pos);
        end;
        pv1000_0.buffer_video[addr] := false;
      end;
    end;
  end;
end;

procedure pv1000_loop;
var
  frame: single;
  f: word;
begin
  init_controls(false, true, false, true);
  frame := z80_0.tframes;
  while EmuStatus = EsRunning do
  begin
    for f := 0 to 261 do
    begin
      case f of
        20:
          begin
            pv1000_0.fd_buffer_flag := true;
            z80_0.change_irq(ASSERT_LINE);
          end;
        221, 225, 229, 233, 239, 243, 247, 251, 253, 259, 1, 5, 9, 13, 17, 21:
          z80_0.change_irq(CLEAR_LINE);
        220:
          begin
            update_video_pv1000;
            z80_0.change_irq(ASSERT_LINE);
          end;
        224, 228, 232, 238, 242, 246, 250, 252, 258, 0, 4, 8, 12, 16:
          z80_0.change_irq(ASSERT_LINE);
      end;
      z80_0.run(frame);
      frame := frame + z80_0.tframes - z80_0.contador;
    end;
    update_region(16, 0, 256, 192, 1, 0, 26, 224, 192, PANT_TEMP);
    events_pv1000;
    video_sync;
  end;
end;

function pv1000_getbyte(direccion: word): byte;
begin
  case direccion of
    0 .. $7FFF, $B800 .. $BFFF:
      pv1000_getbyte := memory[direccion];
  end;
end;

procedure pv1000_putbyte(direccion: word; valor: byte);
begin
  case direccion of
    0 .. $7FFF:
      ;
    $B800 .. $BBFF:
      if memory[direccion] <> valor then
      begin
        memory[direccion] := valor;
        pv1000_0.buffer_video[direccion and $3FF] := true;
      end;
    $BC00 .. $BFFF:
      if memory[direccion] <> valor then
      begin
        memory[direccion] := valor;
        fillchar(pv1000_0.buffer_video, $400, 1);
      end;
  end;
end;

function pv1000_in(puerto: word): byte;
var
  tempb, f: byte;
begin
  case (puerto and $FF) of
    $F8 .. $FB, $FE, $FF:
      pv1000_in := pv1000_0.io_ram[puerto and 7];
    $FC:
      begin
        tempb := byte(pv1000_0.fd_buffer_flag);
        if pv1000_0.fd_data <> 0 then
          tempb := tempb or 2;
        pv1000_0.fd_buffer_flag := false;
        pv1000_in := tempb;
      end;
    $FD:
      begin
        tempb := 0;
        for f := 0 to 3 do
        begin
          if ((pv1000_0.io_ram[5] and (1 shl f)) <> 0) then
          begin
            case f of
              0:
                tempb := tempb or pv1000_0.keys[0];
              1:
                tempb := tempb or pv1000_0.keys[1];
              2:
                tempb := tempb or pv1000_0.keys[2];
              3:
                tempb := tempb or pv1000_0.keys[3];
            end;
            pv1000_0.fd_data := pv1000_0.fd_data and not(1 shl f);
          end;
        end;
        pv1000_in := tempb;
      end;
  end;
end;

procedure pv1000_out(puerto: word; valor: byte);
var
  per, f: byte;
begin
  case (puerto and $FF) of
    $F8 .. $FB:
      begin // Sound
        pv1000_0.io_ram[puerto and 7] := valor;
        puerto := puerto and $3;
        case puerto of
          0 .. 2:
            begin
              per := not(valor) and $3F;
              // flip output once and stall there!
              if ((per = 0) and (pv1000_0.sound.voice[puerto].period <> 0)) then
                pv1000_0.sound.voice[puerto].val := not(pv1000_0.sound.voice[puerto].val);
              pv1000_0.sound.voice[puerto].period := per;
            end;
          3:
            pv1000_0.sound.control := valor;
        end;
      end;
    $FC, $FE:
      pv1000_0.io_ram[puerto and 7] := valor;
    $FD:
      begin
        pv1000_0.io_ram[puerto and 7] := valor;
        pv1000_0.fd_data := $F;
      end;
    $FF:
      begin // colores
        pv1000_0.io_ram[puerto and 7] := valor;
        pv1000_0.pcg_bank := (valor and $20) shr 5;
        pv1000_0.force_pattern := (valor and $10) <> 0; // Dig Dug relies on this
        if (pv1000_0.border_col <> (valor and 7)) then
        begin
          pv1000_0.border_col := valor and 7;
          for f := 0 to 25 do
          begin
            single_line(0, f, paleta[valor and 7], 224, PANT_TEMP);
            single_line(0, f + 192 + 26, paleta[valor and 7], 224, PANT_TEMP);
          end;
        end;
      end;
  end;
end;

procedure pv1000_sound_update;
begin
  tsample[pv1000_0.sound.tsample_, sound_status.sound_position] := pv1000_0.sound.output_;
end;

procedure update_sound_internal;
const
  volumes: array [0 .. 2] of byte = ($10, $18, $20);
var
  f, xor01, xor12: byte;
  sum: integer;
begin
  sum := 0;
  // First calculate all vals
  for f := 0 to 2 do
  begin
    pv1000_0.sound.voice[f].count := pv1000_0.sound.voice[f].count + 1;
    if ((pv1000_0.sound.voice[f].period > 0) and (pv1000_0.sound.voice[f].count >= pv1000_0.sound.voice[f].period)) then
    begin
      pv1000_0.sound.voice[f].count := 0;
      pv1000_0.sound.voice[f].val := not(pv1000_0.sound.voice[f].val);
    end;
  end;
  // Then mix channels according to m_ctrl
  if (pv1000_0.sound.control and 2) <> 0 then
  begin
    // ch0 and ch1
    if ((pv1000_0.sound.control and 1) <> 0) then
    begin
      xor01 := (pv1000_0.sound.voice[0].val xor pv1000_0.sound.voice[1].val) and 1;
      xor12 := (pv1000_0.sound.voice[1].val xor pv1000_0.sound.voice[2].val) and 1;
      sum := sum + (xor01 * volumes[0]);
      sum := sum + (xor12 * volumes[1]);
    end
    else
    begin
      sum := sum + (pv1000_0.sound.voice[0].val * volumes[0]);
      sum := sum + (pv1000_0.sound.voice[1].val * volumes[1]);
    end;
    // ch3 is unaffected by m_ctrl bit 1
    sum := sum + (pv1000_0.sound.voice[2].val * volumes[2]);
    if sum > 32767 then
      pv1000_0.sound.output_ := 32767
    else if sum < -32767 then
      pv1000_0.sound.output_ := -32767
    else
      pv1000_0.sound.output_ := sum;
  end;
end;

// Main
procedure reset_pv1000;
var
  f: byte;
begin
  z80_0.reset;
  reset_audio;
  pv1000_0.fd_buffer_flag := false;
  pv1000_0.force_pattern := false;
  pv1000_0.fd_data := 0;
  pv1000_0.pcg_bank := 0;
  pv1000_0.border_col := 8;
  fillchar(pv1000_0.io_ram, 8, 0);
  fillchar(pv1000_0.keys, 4, 0);
  fillchar(pv1000_0.buffer_video, $400, 1);
  for f := 0 to 2 do
  begin
    pv1000_0.sound.voice[f].count := 0;
    pv1000_0.sound.voice[f].period := 0;
    pv1000_0.sound.voice[f].val := 1;
  end;
  pv1000_0.sound.control := 0;
  pv1000_0.sound.output_ := 0;
end;

procedure pv1000_grabar_snapshot;
var
  nombre: string;
begin
  nombre := snapshot_main_write;
  Directory.pv1000 := ExtractFilePath(nombre);
end;

procedure abrir_pv1000;
var
  extension, nombre_file, romfile: string;
  longitud: integer;
  datos: pbyte;
begin
  if not(openrom(romfile)) then
    exit;
  getmem(datos, $10000);
  if not(extract_data(romfile, datos, longitud, nombre_file)) then
  begin
    freemem(datos);
    exit;
  end;
  extension := extension_fichero(nombre_file);
  if (extension = 'DSP') then
    snapshot_r(datos, longitud)
  else
  begin
    copymemory(@memory[$0], datos, longitud);
    reset_pv1000;
  end;
  fillchar(pv1000_0.buffer_video, $400, 1);
//  change_caption(nombre_file);
  freemem(datos);
  Directory.pv1000 := ExtractFilePath(romfile);
end;

function start_pv1000: boolean;
var
  f: byte;
  colores: tpaleta;
begin
  machine_calls.general_loop := pv1000_loop;
  machine_calls.reset := reset_pv1000;
  machine_calls.cartridges := abrir_pv1000;
  machine_calls.take_snapshot := pv1000_grabar_snapshot;
  machine_calls.fps_max := 59.92274;
  start_pv1000 := false;
  start_audio(false);
  screen_init(1, 256, 192, false, true);
  start_video(224, 244);
  // Main CPU
  z80_0 := cpu_z80.create(17897725 div 5, 256);
  z80_0.change_ram_calls(pv1000_getbyte, pv1000_putbyte);
  z80_0.change_io_calls(pv1000_in, pv1000_out);
  z80_0.init_sound(pv1000_sound_update);
  // sound
  pv1000_0.sound.tsample_ := init_channel;
  pv1000_0.sound.timer := timers.init(z80_0.numero_cpu, (17897725 / 5) / (17897725 / 1024), update_sound_internal, nil, true);
  // Pal
  for f := 0 to 7 do
  begin
    colores[f].r := pv1000_paleta[f] shr 16;
    colores[f].g := (pv1000_paleta[f] shr 8) and $FF;
    colores[f].b := pv1000_paleta[f] and $FF;
  end;
  set_pal(colores, 8);
  // final
  reset_pv1000;
  if main_vars.console_init then
    abrir_pv1000;
  start_pv1000 := true;
end;

end.
